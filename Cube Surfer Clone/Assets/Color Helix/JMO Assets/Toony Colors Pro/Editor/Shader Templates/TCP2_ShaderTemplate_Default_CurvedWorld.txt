// Toony Colors Pro+Mobile 2
// (c) 2014-2017 Jean Moreno

// This template requires "Curved World" by Davit Naskidashvili
// from the Unity Asset Store
// https://www.assetstore.unity3d.com/en/#!/content/26165
#NAME=Curved World/Default
#INFO=Template: Curved World
#WARNING=Requires "Curved World" asset from the Asset Store by Davit Naskidashvili
#FEATURES
space
---
---
header	lbl=LIGHTING
---
---
space
mult	lbl=Lighting Function		kw=Unity 5|,Unity 4 (Legacy)|LIGHTING_UNITY4	nohelp	tt=Which Surface Shader lighting function model to use.\nTCP2 before v2.3.3 was using the Legacy one; if you experience issues with your shaders, try to use it as well.
---
mult	lbl=Ramp Style				kw=Slider Ramp|,RGB Slider Ramp|RGB_RAMP,Texture Ramp|TEXTURE_RAMP		hlptop=ramp_style_sg				tt=Defines the transitioning between dark and lit areas of the model
mult	lbl=Ramp Control			kw=Global|,Main + Other Lights|RAMP_MAIN_OTHER,Main + Light Type|RAMP_MAIN_LIGHTTYPE	toggles=RAMP_SEPARATED	hlptop=ramp_control_sg		tt=Defines how many ramp controls the material will have:\n\nGlobal: one control for all lights\n\nMain + Other Lights: one control for the main directional light and one for all other lights\n\nMain + Light Type: one control for the main directional light and one for each light type (directional, point, spot)
sngl	lbl=Bypass Point light falloff	kw=BYPASS_POINT_FALLOFF							nohelp	tt=Bypass Unity's built-in point light falloff and only use the TCP2 ramp instead
sngl	lbl=Bypass Spot light falloff	kw=BYPASS_SPOT_FALLOFF							nohelp	tt=Bypass Unity's built-in spot light falloff and only use the TCP2 ramp instead
---
#sngl	lbl=Separated Ramps			kw=SEPARATE_RAMPS		excl=TEXTURE_RAMP	nohelp	tt=Separates the ramp settings between the main directional light and the other lights (like in the PBS shaders)
#sngl	lbl=Enable Wrapped Lighting	kw=ENABLE_WRAPPED_LIGHTING								tt=Enable wrapped diffuse lighting, making lighting wrap around the model
mult	lbl=Wrapped Lighting		kw=Off|,Half|ENABLE_WRAPPED_LIGHTING,Custom|WRAP_CUSTOM		tt=Enable wrapped lighting, with different levels of control
---
sngl	lbl=Colors Multipliers			kw=COLOR_MULTIPLIERS			nohelp	tt=Adds multiplier values for highlight and shadow colors to enhance contrast or colors
sngl	lbl=Shadow Color (other lights)	kw=ENABLE_SHADOW_2ND_LIGHTS		nohelp	tt=Enable shadow color for additive lights; this means that the model will get some tint in unlit areas when using secondary lights. This was the default behavior before v2.3.3.
---
mult	lbl=Specular			kw=Off|,Regular|SPECULAR,Anisotropic|SPECULAR_ANISOTROPIC		hlptop=specular_sg
mask	lbl=Specular Mask	msk=SPEC_MASK		ch=SPEC_MASK_CHANNEL		kw=SPECULAR_MASK	dispName=Specular	needsOr=SPECULAR,SPECULAR_ANISOTROPIC	indent	nohelp		tt=Enables specular mask (gloss map)
mask	lbl=Shininess Mask	msk=SPEC_SHIN_MASK	ch=SPEC_SHIN_MASK_CHANNEL	kw=SPEC_SHIN_MASK	dispName=Shininess	needsOr=SPECULAR,SPECULAR_ANISOTROPIC	indent	nohelp
sngl	lbl=Cartoon Specular	kw=SPECULAR_TOON																	needsOr=SPECULAR,SPECULAR_ANISOTROPIC	indent	nohelp		tt=Enables clear delimitation of specular color
---
sngl	lbl=Reflection			kw=REFLECTION	hlptop=reflection_sg																tt=Enables cubemap reflection
mask	lbl=Reflection Mask		msk=REFL_MASK	ch=REFL_MASK_CHANNEL		kw=REFL_MASK		dispName=Reflection		needs=REFLECTION	indent	nohelp
sngl	lbl=Reflection Probes (Unity5)			hlptop=Reflection Probes	kw=U5_REFLPROBE								needs=REFLECTION	indent	nohelp		tt=Pick reflection from Unity 5 Reflection Probes
sngl	lbl=Reflection Color	kw=REFL_COLOR																			needs=REFLECTION	indent	nohelp		tt=Enables reflection color control
sngl	lbl=Reflection Roughness	kw=REFL_ROUGH							excl=U5_REFLPROBE							needs=REFLECTION	indent	nohelp		tt=Simulates reflection roughness using the Cubemap's LOD levels\n\nREQUIRES MipMaps ENABLED IN THE CUBEMAP TEXTURE!
sngl	lbl=Rim Reflection/Fresnel	kw=RIM_REFL								toggles=RIM									needs=REFLECTION	indent	nohelp		tt=Reflection will be multiplied by rim lighting, resulting in a fresnel-like effect
---
mult	lbl=Rim					kw=Off|,Rim Lighting|RIM,Rim Outline|RIM_OUTLINE				hlptop=rim_sg	tt=Rim effects (fake light coming from behind the model)
sngl	lbl=Vertex Rim			kw=RIM_VERTEX															needsOr=RIM,RIM_OUTLINE			indent	nohelp		tt=Compute rim lighting per-vertex (faster but innacurate)
sngl	lbl=Directional Rim		kw=RIMDIR																needsOr=RIM,RIM_OUTLINE			indent	nohelp
mask	lbl=Rim Mask			msk=RIM_MASK	ch=RIM_MASK_CHANNEL		kw=RIM_MASK		dispName=Rim	needsOr=RIM,RIM_OUTLINE			indent	nohelp
sngl	lbl=Light-based Mask	kw=RIM_LIGHTMASK														needs=RIM						indent	nohelp		tt=Will make rim be influenced by nearby lights
---
mult	lbl=MatCap			kw=Off|,MatCap Add|MATCAP_ADD,MatCap Multiply|MATCAP_MULT	toggles=MATCAP		hlptop=matcap_sg					tt=MatCap effects (fast fake reflection using a spherical texture)
mask	lbl=MatCap Mask		msk=MASK_MC		ch=MASK_MC_CHANNEL	kw=MASK_MC		dispName=MatCap		needsOr=MATCAP_ADD,MATCAP_MULT	indent	nohelp
sngl	lbl=Pixel MatCap	kw=MATCAP_PIXEL											needs=BUMP		needsOr=MATCAP_ADD,MATCAP_MULT	indent	nohelp		tt=If enabled, will calculate MatCap per-pixel\nRequires normal map
sngl	lbl=MatCap Color	kw=MC_COLOR																needsOr=MATCAP_ADD,MATCAP_MULT	indent	nohelp
---
mult	lbl=Custom Ambient		kw=Off|,Cubemap Ambient|CUBE_AMBIENT,Directional Ambient|DIRAMBIENT		tt=Custom ambient lighting
sngl	lbl=View Dependent		kw=DIRAMBIENT_VIEW		needs=DIRAMBIENT	nohelp	indent		tt=Makes directional ambient view dependent (e.g. left color is always coming from the left no matter the view direction)
space
---
---
header	lbl=SURFACE
---
---
space
sngl	lbl=Normal/Bump Map			kw=BUMP			hlptop=normal_bump_map_sg
sngl	lbl=Bump Scale				kw=BUMP_SCALE	needs=BUMP	indent	nohelp
sngl	lbl=Parallax/Height Map		kw=PARALLAX		needs=BUMP	indent	nohelp
---
sngl	lbl=Detail Texture			kw=DETAIL_TEX
sngl	lbl=Use UV2 coordinates		kw=DETAIL_UV2																indent	nohelp	needs=DETAIL_TEX	tt=Use second texture coordinates for the detail texture
mask	lbl=Detail Mask				msk=DETAIL_MASK	ch=DETAIL_MASK_CHANNEL	kw=DETAIL_MASK	dispName=Detail		indent	nohelp		needs=DETAIL_TEX
---
mask	lbl=Color Mask				msk=COLORMASK	ch=COLORMASK_CHANNEL	kw=COLORMASK	dispName=Color		hlptop=Color Mask
sngl	lbl=Separate Color			kw=COLORMASK_SEPARATE					needs=COLORMASK						indent			nohelp			tt=Use a separate masked color (if disabled, will use the main Color property)
---
sngl	lbl=HSV Controls			kw=HSV_CONTROLS																					nohelp			tt=Adds Hue, Saturation, Value controls to the main texture
mask	lbl=HSV Mask				msk=HSV_MASK	ch=HSV_MASK_CHANNEL		kw=HSV_MASK		dispName=HSV	needs=HSV_CONTROLS		nohelp			tt=Masks the HSV control
---
sngl	lbl=Occlusion Map				kw=OCCLUSION		nohelp		tt=Adds an occlusion texture map
---
sngl	lbl=Vertex Colors				kw=VCOLORS					tt=Multiplies the color with vertex colors
---
subh	lbl=Texture Splatting/Blending
mult	lbl=Texture Blending			kw=Off|,Vertex Colors|TEXBLEND_VCOLORS,Texture Map|TEXBLEND_MAP	toggles=TEXTURE_BLENDING				tt=Enable texture blending
#mult	lbl=Texture Blending			kw=Off|,Vertex Colors|TEXBLEND_VCOLORS,Texture Map|TEXBLEND_MAP,Unity Terrain Splatmap|TEXBLEND_UNITY_SPLATMAP	toggles=TEXTURE_BLENDING				tt=Enable texture blending
mult	lbl=Blend Method				kw=Linear|TEXBLEND_LINEAR,Linear (Additive)|TEXBLEND_LINEAR_ADD,Height (Texture Alpha)|TEXBLEND_HEIGHT	nohelp	indent	needs=TEXTURE_BLENDING		tt=Defines how to blend textures (see documentation)
sngl	lbl=Enhance Blend Contrast		kw=TEXBLEND_NORMALIZE		nohelp	indent	needs=TEXTURE_BLENDING	excl=TEXBLEND_LINEAR_ADD	tt=Enhance contrast between colors when the blend channel is not 0.\nSee documentation for more info.
float	lbl=Height Contrast				kw=TEXBLEND_HEIGHT_CONTRAST		default=2.5	needs=TEXBLEND_HEIGHT	nohelp	indent		tt=Adjust the contrast for height-based blending (default: 2.5)
warning	msgType=info					needs=TEXBLEND_HEIGHT		lbl=The order in which textures are sampled matters when using height blending, because the alpha from the textures is cumulative!
sngl	lbl=Texture 1					kw=BLEND_TEX1	tt=Additional texture blended based on a vertex color channel		nohelp	indent	needs=TEXTURE_BLENDING			half
keyword	lbl=Color Channel				kw=BLEND_TEX1_CHNL	values=R|r,G|g,B|b,A|a		needs=TEXTURE_BLENDING,BLEND_TEX1	nohelp	default=0	forceKeyword=true	inline
sngl	lbl=Texture 2					kw=BLEND_TEX2	tt=Additional texture blended based on a vertex color channel		nohelp	indent	needs=TEXTURE_BLENDING			half
keyword	lbl=Color Channel				kw=BLEND_TEX2_CHNL	values=R|r,G|g,B|b,A|a		needs=TEXTURE_BLENDING,BLEND_TEX2	nohelp	default=1	forceKeyword=true	inline
sngl	lbl=Texture 3					kw=BLEND_TEX3	tt=Additional texture blended based on a vertex color channel		nohelp	indent	needs=TEXTURE_BLENDING			half
keyword	lbl=Color Channel				kw=BLEND_TEX3_CHNL	values=R|r,G|g,B|b,A|a		needs=TEXTURE_BLENDING,BLEND_TEX3	nohelp	default=2	forceKeyword=true	inline
sngl	lbl=Texture 4					kw=BLEND_TEX4	tt=Additional texture blended based on a vertex color channel		nohelp	indent	needs=TEXTURE_BLENDING			half	excl=TEXBLEND_UNITY_SPLATMAP
keyword	lbl=Color Channel				kw=BLEND_TEX4_CHNL	values=R|r,G|g,B|b,A|a		needs=TEXTURE_BLENDING,BLEND_TEX4	nohelp	default=3	forceKeyword=true	inline	excl=TEXBLEND_UNITY_SPLATMAP
sngl	lbl=Normal Map Blending			kw=TEXBLEND_BUMP	toggles=BUMP				needs=TEXTURE_BLENDING				nohelp	indent		tt=Enables texture blending for the normal map as well
space	needs=TEXTURE_BLENDING
sngl	lbl=Triplanar Mapping			kw=TRIPLANAR																									hlptop=triplanar	tt=Enables triplanar mapping
mult	lbl=Surface Texture				kw=One Texture (ground)|,Two Textures (ground + ceiling)|TRIPLANAR_CEILING	needs=TRIPLANAR						nohelp	indent		tt=Use different textures for the ground and ceiling
mult	lbl=Ceiling Mode				kw=Y Normal Direction|,Min Max Threshold|TRIPLANAR_CEILING_MINMAX			needs=TRIPLANAR,TRIPLANAR_CEILING	nohelp	indent		tt=Use different textures for the ground and ceiling
mult	lbl=Sides Texture				kw=One Texture|,Two Textures (X + Z)|TRIPLANAR_SIDES_XY						needs=TRIPLANAR						nohelp	indent		tt=Use different textures for the X and Z orientations
mult	lbl=Height Blending (Alpha)		kw=Off (Linear)|,Sides Alpha|TRIPLANAR_HEIGHT_SIDES,Ground Alpha|TRIPLANAR_HEIGHT_GROUND	needs=TRIPLANAR		nohelp	indent		tt=Modulate the transition between textures based on their alpha channel (height map)
warning	msgType=info				needs=TRIPLANAR,TEXTURE_BLENDING		lbl=When using <b>Triplanar Mapping</b>, the <b>Texture Blending</b> feature will only affect the ground texture.
space	space=4
#sngl	lbl=Unity Terrain Compatibility	kw=UNITY_TERRAIN_COMPATIBILITY					needsOr=TEXTURE_BLENDING,TRIPLANAR	nohelp		tt=Rename the internal name for the Main Texture, so that it's not overwritten by the Terrain system
---
sngl	lbl=Subsurface Scattering	kw=SUBSURFACE_SCATTERING
mult	lbl=Subsurface Lights	kw=Point\Spot Lights|,Directional Lights|SS_DIR_LIGHTS,All Lights|SS_ALL_LIGHTS	needs=SUBSURFACE_SCATTERING		indent	nohelp		tt=Defines which lights will affect subsurface scattering
mask	lbl=Subsurface Mask		msk=SS_MASK		ch=SS_MASK_CHANNEL	kw=SS_MASK	dispName=Subsurface		needs=SUBSURFACE_SCATTERING		indent	nohelp		tt=Defines where the subsurface scattering effect should apply
sngl	lbl=Subsurface Color			kw=SUBSURFACE_COLOR												needs=SUBSURFACE_SCATTERING		indent	nohelp		tt=Control the color of the subsurface effect (only affecting back lighting)
sngl	lbl=Subsurface Ambient Color	kw=SUBSURFACE_AMB_COLOR											needs=SUBSURFACE_SCATTERING		indent	nohelp		tt=Adds an ambient subsurface color, affecting both front and back lighting
#sngl	lbl=Subsurface Light Color		kw=SS_COLOR_FROM_LIGHT											needs=SUBSURFACE_SCATTERING		indent	nohelp		tt=Inherit the subsurface color from the lights
sngl	lbl=Multiplicative				kw=SS_MULTIPLICATIVE											needs=SUBSURFACE_SCATTERING		indent	nohelp		tt=Makes the subsurface scattering effect multiplied to the diffuse color instead of added with it
---
mask	lbl=Emission Map	msk=EMISSION_MASK	ch=EMISSION_MASK_CHANNEL	kw=EMISSION		dispName=Emission	hlptop=Self-Illumination Map
sngl	lbl=Emission Color	kw=EMISSION_COLOR																	hlptop=Self-Illumination Map
sngl	lbl=HDR Color		kw=EMISSION_COLOR_HDR	needs=EMISSION_COLOR	indent	nohelp							hlptop=Self-Illumination Map	tt=Makes the Emission Color an HDR color that can go outside the [0:1] range (useful for effects like bloom)
space
---
---
header	lbl=STYLIZATION
---
---
space
sngl	lbl=Textured Threshold		kw=TEXTURED_THRESHOLD									tt=Adds a textured variation to the highlight/shadow threshold, allowing handpainting like effects for example
---
sngl	lbl=Diffuse Tint			kw=DIFFUSE_TINT											tt=Adds a diffuse tint color, to add some subtle coloring to the diffuse lighting
---
mult	lbl=Sketch						kw=Off|,Sketch Overlay|SKETCH,Sketch Gradient|SKETCH_GRADIENT							tt=Sketch texture overlay on the shadowed areas\nOverlay: regular texture overlay\nGradient: used for halftone-like effects
mult	lbl=Sketch Blending				kw=Regular|,Color Burn|SKETCH_COLORBURN,Color Blend|SKETCH_COLORBLEND	needs=SKETCH	nohelp	indent		tt=Defines how to blend the Sketch texture with the model
sngl	lbl=Animated Sketch				kw=SKETCH_ANIM			needsOr=SKETCH,SKETCH_GRADIENT		nohelp	indent		tt=Animates the sketch overlay texture, simulating a hand-drawn animation style
sngl	lbl=Vertex Coords				kw=SKETCH_VERTEX		needsOr=SKETCH,SKETCH_GRADIENT		nohelp	indent		tt=Compute screen coordinates in vertex shader (faster but can cause distortions)\nIf disabled will compute in pixel shader (slower)
sngl	lbl=Disable Obj-Space Offset	kw=NO_SKETCH_OFFSET		needsOr=SKETCH,SKETCH_GRADIENT		nohelp	indent		tt=Prevent the screen-space UVs from being offset based on the object's position
---
mult	lbl=Outline					kw=Off|,Opaque Outline|OUTLINE,Blended Outline|OUTLINE_BLENDING														tt=Outline around the model
sngl	lbl=Outline behind model	kw=OUTLINE_BEHIND		needsOr=OUTLINE,OUTLINE_BLENDING								indent	nohelp		tt=If enabled, outline will only show behind model
sngl	lbl=Depth Pass				kw=OUTLINE_DEPTH		needsOr=OUTLINE,OUTLINE_BLENDING	needs=OUTLINE_BEHIND		indent	nohelp		tt=Adds a depth writing pass for the outline behind model: this can solve issues with sorting and drawing order
#---
#sngl	lbl=TCP2 Lightmap	kw=LIGHTMAP		hlptop=Lightmap		tt=Will use TCP2's lightmap decoding, affecting it with ramp and color settings
#---
#sngl	lbl=GPU Instancing Support	kw=GPU_INSTANCING	help:false	tt=Will enable instancing support if enabled
space
---
---
header	lbl=MISC FEATURES
---
---
space
#sngl	lbl=Independent Shadows					kw=INDEPENDENT_SHADOWS			tt=Disable shadow color influence for cast shadows
#---
sngl	lbl=Dissolve Map				kw=DISSOLVE																		nohelp				tt=Adds a dissolve texture map with the corresponding slider
mult	lbl=Color Channel				kw=Alpha|,Red|DSLV_R,Green|DSLV_G,Blue|DSLV_B		needs=DISSOLVE				nohelp	indent		tt=Color channel to use for the dissolve map
sngl	lbl=Independent UV				kw=DISSOLVE_UV										needs=DISSOLVE				nohelp	indent		tt=Use separate UVs with its own tiling and offset values for the dissolve map (else use the main texture UV)
sngl	lbl=Gradient Ramp				kw=DISSOLVE_GRADIENT								needs=DISSOLVE				nohelp	indent		tt=Use a gradient texture to color the dissolving area
float	lbl=Gradient Contrast			kw=DISSOLVE_GRAD_CONTRAST	default=2.0				needs=DISSOLVE_GRADIENT		nohelp	indent		tt=Adjust the color contrast for the dissolve gradient
---
subh	lbl=Transparency
sngl	lbl=Alpha Blending			kw=ALPHA
sngl	lbl=Dithered Shadows		kw=DITHERED_SHADOWS		needs=ALPHA		indent	nohelp		tt=Enables dithered shadows for transparent materials
sngl	lbl=Alpha Testing (Cutout)	kw=CUTOUT
sngl	lbl=Alpha-to-Coverage		kw=ALPHA_TO_COVERAGE								nohelp		tt=Alpha-to-coverage transparency (better anti-aliasing than cutout with MSAA)
sngl	lbl=Ignore Main Texture		kw=ALPHA_NO_MAINTEX		needsOr=ALPHA,CUTOUT		nohelp		tt=Ignore the main texture's alpha channel for alpha blending/testing
sngl	lbl=Ignore Color			kw=ALPHA_NO_COLOR		needsOr=ALPHA,CUTOUT		nohelp		tt=Ignore the main color's alpha channel for alpha blending/testing
---
mult	lbl=Culling						kw=Back (default)|,Front|CULL_FRONT,Off (double-sided)|CULL_OFF		nohelp		tt=Defines how to cull faces
sngl	lbl=Backface Lighting			kw=USE_VFACE	nohelp															tt=Invert the normals on backfaces for accurate lighting calculation (this may not work properly with shadows and introduce other artifacts)
---
keyword	lbl=Shader Target	kw=SHADER_TARGET	forceKeyword=true	values=2.0 (Old hardware)|2.0,2.5 (Mobile devices)|2.5,3.0 (Recommended default)|3.0,3.5|3.5,4.0|4.0,4.5|4.5,4.6|4.6,5.0|5.0		default=2
warning	msgType=info		lbl=Use <b>Shader Target 2.5</b> for maximum compatibility across mobile devices.  Increase the number if the shader fails to compile (not enough instructions or interpolators).
---
space	space=6
header	lbl=FLAGS
flag	lbl=Add Shadow Passes			kw=addshadow													tt=Force the shader to have the Shadow Caster and Collector passes.\nCan help if shadows don't work properly with the shader
flag	lbl=Full Forward Shadows		kw=fullforwardshadows											tt=Enable support for all shadow types in Forward rendering path
flag	lbl=Disable Shadows				kw=noshadow														tt=Disables all shadow receiving support in this shader
flag	lbl=Disable Fog					kw=nofog														tt=Disables Unity Fog support.\nCan help if you run out of vertex interpolators and don't need fog.
flag	lbl=Disable Lightmaps			kw=nolightmap													tt=Disables all lightmapping support in this shader.\nCan help if you run out of vertex interpolators and don't need lightmaps.
flag	lbl=Disable Ambient Lighting	kw=noambient		excl=DIRAMBIENT,CUBE_AMBIENT,OCCLUSION		tt=Disable ambient lighting
flag	lbl=Disable Vertex Lighting		kw=novertexlights												tt=Disable vertex lights and spherical harmonics (light probes)
space	space=6
header	lbl=FLAGS (Mobile-Friendly)
flag	lbl=One Directional Light		kw=noforwardadd													tt=Use additive lights as vertex lights.\nRecommended for Mobile
flag	lbl=Vertex View Dir				kw=interpolateview												tt=Calculate view direction per-vertex instead of per-pixel.\nRecommended for Mobile	needsOr=SPECULAR,SPECULAR_ANISOTROPIC,SUBSURFACE,PARALLAX,RIM,RIM_OUTLINE
flag	lbl=Half as View				kw=halfasview													tt=Pass half-direction vector into the lighting function instead of view-direction.\nFaster but inaccurate.\nRecommended for Specular, but use Vertex Rim to optimize Rim Effects instead	needsOr=SPECULAR,SPECULAR_ANISOTROPIC,SUBSURFACE,PARALLAX,RIM,RIM_OUTLINE
#END
#KEYWORDS

#Legacy feature auto-migration
/// IF SEPARATE_RAMPS
enable_kw_config	RAMP_MAIN_OTHER
disable_kw_config	SEPARATE_RAMPS
///

#MainTex keyword
/// IF UNITY_TERRAIN_COMPATIBILITY
set		MAIN_TEX	_MainTex0
/// ELSE
set		MAIN_TEX	_MainTex
///

#Vertex Colors usage
/// IF TEXBLEND_VCOLORS || VCOLORS || VCOLORS_MASK
enable_kw	USE_VERTEX_COLORS
///

#Unity Splatmap
/// IF TEXBLEND_UNITY_SPLATMAP
disable_kw		BLEND_TEX4
///
/// IF TEXBLEND_LINEAR_ADD
disable_kw		TEXBLEND_NORMALIZE
///

#Custom Lighting Function
#Now always enabled
enable_kw	CUSTOM_LIGHTING

#Custom Ambient
/// IF OCCLUSION || CUBE_AMBIENT || DIRAMBIENT
enable_kw		CUSTOM_AMBIENT
enable_flag		noambient
///

#Final Color
/// IF RIM_LIGHTMASK
enable_kw		FINAL_COLOR
enable_flag		finalcolor:fcolor
///

#Vertex function
/// IF VERTEX_FUNC || MATCAP || SKETCH || SKETCH_GRADIENT || (RIM_VERTEX && (RIM || RIM_OUTLINE)) || (BUMP && RIMDIR && (RIM || RIM_OUTLINE)) || CUSTOM_AMBIENT || SPECULAR_ANISOTROPIC
enable_kw		VERTEX_FUNC
enable_flag		vertex:vert
///

#Keepalpha flag
/// IF ALPHA || ALPHA_TO_COVERAGE
enable_flag		keepalpha
///

#Lighting model
/// IF CUSTOM_LIGHTING
set		LIGHTING_MODEL		ToonyColorsCustom
/// ELSE
	/// IF SPECULAR || SPECULAR_ANISOTROPIC
set		LIGHTING_MODEL		ToonyColorsSpec
	/// ELSE
set		LIGHTING_MODEL		ToonyColors
	///
///
#END

Shader "@%SHADER_NAME%@"
{
	Properties
	{
	[TCP2HeaderHelp(BASE, Base Properties)]
		//TOONY COLORS
		_Color ("Color", Color) = (1,1,1,1)
/// IF COLORMASK_SEPARATE
		_MaskedColor ("Masked Color", Color) = (1.0, 0.0, 0.0, 1.0)
///
		_HColor ("Highlight Color", Color) = (0.785,0.785,0.785,1.0)
		_SColor ("Shadow Color", Color) = (0.195,0.195,0.195,1.0)
/// IF COLOR_MULTIPLIERS
		_HighlightMultiplier ("Highlight Multiplier", Range(0,4)) = 1
		_ShadowMultiplier ("Shadow Multiplier", Range(0,4)) = 1
///
/// IF WRAP_CUSTOM
		_WrapFactor ("Light Wrapping", Range(-1,3)) = 1.0
///
		
		//DIFFUSE
/// IF TEXBLEND_UNITY_SPLATMAP
		[HideInInspector] _Control("Control (RGBA)", 2D) = "red" {}
///
		@%MAIN_TEX%@ ("Main Texture", 2D) = "white" {}
/// IF TEXTURE_BLENDING
		
	/// IF TEXBLEND_VCOLORS
		[Header(Texture Blending (Vertex Colors))]
	/// ELIF TEXBLEND_MAP
		[Header(Texture Blending (Texture Map))]
		_TexBlendMap ("Texture Blending Map", 2D) = "black" {}
		[Space]
	/// ELIF TEXBLEND_UNITY_SPLATMAP
		[Header(Texture Blending (Unity Terrain))]
	///
	/// IF BLEND_TEX1
		_BlendTex1 ("Texture 1 (@%BLEND_TEX1_CHNL%@)", 2D) = "white" {}
	///
	/// IF BLEND_TEX2
		_BlendTex2 ("Texture 2 (@%BLEND_TEX2_CHNL%@)", 2D) = "white" {}
	///
	/// IF BLEND_TEX3
		_BlendTex3 ("Texture 3 (@%BLEND_TEX3_CHNL%@)", 2D) = "white" {}
	///
	/// IF BLEND_TEX4
		_BlendTex4 ("Texture 4 (@%BLEND_TEX4_CHNL%@)", 2D) = "white" {}
	///
	/// IF TEXBLEND_NORMALIZE
		[PowerSlider(4.0)] _BlendContrast ("Blending Contrast", Range(1,4)) = 1
	///
	/// IF TEXBLEND_HEIGHT
		[Header(Height Blending Parameters)]
		[TCP2Vector4Floats(Height Smoothing,R,G,B,A,0.001,2,0.001,2,0.001,2,0.001,2)] _VColorBlendSmooth ("Smooth", Vector) = (0.25,0.25,0.25,0.25)
		[TCP2Vector4Floats(Height Offset,R,G,B,A)] _VColorBlendOffset ("Height Offset", Vector) = (0,0,0,0)
		[TCP2HelpBox(Info,Height will be taken from each texture alpha channel.  No alpha in the texture will result in linear blending.)]
	///
///
/// IF TRIPLANAR
	
	[Header(Triplanar Mapping)]
	/// IF TRIPLANAR_CEILING
		_TriCeiling ("Ceiling", 2D) = "white" {}
		/// IF TRIPLANAR_CEILING_MINMAX
		_CeilMin ("Ceiling Min", Float) = -1
		_CeilMax ("Ceiling Max", Float) = 1
		[Space]
		///
	///
	/// IF TRIPLANAR_SIDES_XY
		_TriSideX ("Side X", 2D) = "white" {}
		_TriSideZ ("Side Z", 2D) = "white" {}
		[Space]
	/// ELSE
		_TriSide ("Sides", 2D) = "white" {}
		[Space]
	///
		[TCP2Vector4Floats(Triplanar Parameters,Contrast X,Contrast Y,Contrast Z,Smoothing,1,16,1,16,1,16,0.05,1)] _TriplanarBlendStrength ("Strength (XYZ) Smoothing (W)", Vector) = (2,8,2,0.5)
	/// IF TRIPLANAR_HEIGHT_SIDES || TRIPLANAR_HEIGHT_GROUND
		_TriplanarHeightOffset ("Alpha Blend Offset", Range(-1,1)) = 0
		_TriplanarHeightSmooth ("Alpha Blend Smoothing", Range(0.001,1)) = 0.1
	///
///
/// IF DETAIL_TEX
		_Detail ("Detail (RGB)", 2D) = "gray" {}
///
/// IF DIFFUSE_TINT
		_DiffTint ("Diffuse Tint", Color) = (0.7,0.8,1,1)
///
	[TCP2Separator]
		
		//TOONY COLORS RAMP
		[TCP2Header(RAMP SETTINGS)]
		
/// IF TEXTURE_RAMP
	/// IF RAMP_SEPARATED
		[Header(Main Directional Light)]
	///
		[TCP2Gradient] _Ramp			("Toon Ramp (RGB)", 2D) = "gray" {}
	/// IF RAMP_MAIN_OTHER
		[Header(Other Lights)]
		[TCP2Gradient] _RampOtherLights	("Toon Ramp", 2D) = "gray" {}
		[Space]
	/// ELIF RAMP_MAIN_LIGHTTYPE
	[HideInInspector] __BeginGroup_OtherLights ("Other Lights", Float) = 0
		[TCP2Gradient] _RampPoint		("Toon Ramp (Point Lights)", 2D) = "gray" {}
		[TCP2Gradient] _RampSpot		("Toon Ramp (Spot Lights)", 2D) = "gray" {}
		[TCP2Gradient] _RampDir			("Toon Ramp (Directional Lights)", 2D) = "gray" {}
	[HideInInspector] __EndGroup ("Other Lights", Float) = 0
	///
/// ELIF RGB_RAMP
	/// IF RAMP_SEPARATED
		[Header(Main Directional Light)]
	///
		_RampThresholdRGB ("Ramp Threshold (RGB)", Color) = (0.5,0.5,0.5,1)
		_RampSmooth ("Ramp Smoothing", Range(0.001,1)) = 0.1
	/// IF RAMP_MAIN_OTHER
		[Header(Other Lights)]
		_RampThresholdOtherLightsRGB ("Threshold RGB (Other Lights)", Color) = (0.5,0.5,0.5,1)
		_RampSmoothOtherLights ("Smoothing (Other Lights)", Range(0.001,1)) = 0.5
		[Space]
	/// ELIF RAMP_MAIN_LIGHTTYPE
	[HideInInspector] __BeginGroup_OtherLights ("Other Lights", Float) = 0
		_RampThresholdPointRGB ("Threshold RGB (Point Lights)", Color) = (0.5,0.5,0.5,1)
		_RampSmoothPoint ("Smoothing (Point Lights)", Range(0.001,1)) = 0.5
		[Space]
		_RampThresholdSpotRGB ("Threshold RGB (Spot Lights)", Color) = (0.5,0.5,0.5,1)
		_RampSmoothSpot ("Smoothing (Spot Lights)", Range(0.001,1)) = 0.5
		[Space]
		_RampThresholdDirRGB ("Threshold RGB (Directional Lights)", Color) = (0.5,0.5,0.5,1)
		_RampSmoothDir ("Smoothing (Directional Lights)", Range(0.001,1)) = 0.5
	[HideInInspector] __EndGroup ("Other Lights", Float) = 0
	///
/// ELSE
	/// IF RAMP_SEPARATED
		[Header(Main Directional Light)]
	///
		_RampThreshold ("Ramp Threshold", Range(0,1)) = 0.5
		_RampSmooth ("Ramp Smoothing", Range(0.001,1)) = 0.1
	/// IF RAMP_MAIN_OTHER
		[Header(Other Lights)]
		_RampThresholdOtherLights ("Threshold", Range(0,1)) = 0.5
		_RampSmoothOtherLights ("Smoothing", Range(0.001,1)) = 0.5
		[Space]
	/// ELIF RAMP_MAIN_LIGHTTYPE
	[HideInInspector] __BeginGroup_OtherLights ("Other Lights", Float) = 0
		_RampThresholdPoint ("Threshold (Point)", Range(0,1)) = 0.5
		_RampSmoothPoint ("Smoothing (Point)", Range(0.001,1)) = 0.5
		[Space]
		_RampThresholdSpot ("Threshold (Spot)", Range(0,1)) = 0.5
		_RampSmoothSpot ("Smoothing (Spot)", Range(0.001,1)) = 0.5
		[Space]
		_RampThresholdDir ("Threshold (Directional)", Range(0,1)) = 0.5
		_RampSmoothDir ("Smoothing (Directional)", Range(0.001,1)) = 0.5
	[HideInInspector] __EndGroup ("Other Lights", Float) = 0
		[Space]
	///
///
/// IF TEXTURED_THRESHOLD
		_ThresholdTex ("Threshold Texture (Alpha)", 2D) = "black" {}
///
	[TCP2Separator]
/// IF HSV_CONTROLS
	
	[Header(HSV Controls)]
		_HSV_H ("Hue", Range(-360,360)) = 0
		_HSV_S ("Saturation", Range(-1,1)) = 0
		_HSV_V ("Value", Range(-1,1)) = 0
	[TCP2Separator]
///
/// IF MASK1 || MASK2 || MASK3
	
	[Header(Masks)]
///
/// IF MASK1
	/// IF !UVMASK1
		[NoScaleOffset]
	///
		_Mask1 ("Mask 1 (@%MASK1%@)", 2D) = "black" {}
///
/// IF MASK2
	/// IF !UVMASK2
		[NoScaleOffset]
	///
		_Mask2 ("Mask 2 (@%MASK2%@)", 2D) = "black" {}
///
/// IF MASK3
	/// IF !UVMASK3
		[NoScaleOffset]
	///
		_Mask3 ("Mask 3 (@%MASK3%@)", 2D) = "black" {}
///
/// IF MASK1 || MASK2 || MASK3
	[TCP2Separator]
///
/// IF EMISSION_COLOR
	
	[TCP2HeaderHelp(EMISSION, Emission)]
	/// IF EMISSION_COLOR_HDR
		[HDR] _EmissionColor ("Emission Color", Color) = (1,1,1,1.0)
	/// ELSE
		_EmissionColor ("Emission Color", Color) = (1,1,1,1.0)
	///
	[TCP2Separator]
///
/// IF SUBSURFACE_SCATTERING
	
	[TCP2HeaderHelp(SUBSURFACE SCATTERING, Subsurface Scattering)]
		_SSDistortion ("Distortion", Range(0,2)) = 0.2
		_SSPower ("Power", Range(0.1,16)) = 3.0
		_SSScale ("Scale", Float) = 1.0
	/// IF SUBSURFACE_COLOR
		_SSColor ("Color (RGB)", Color) = (0.5,0.5,0.5,1)
	///
	/// IF SUBSURFACE_AMB_COLOR
		_SSAmbColor ("Ambient Color (RGB)", Color) = (0.5,0.5,0.5,1)
	///
	[TCP2Separator]
///
/// IF BUMP
	
	[TCP2HeaderHelp(NORMAL MAPPING, Normal Bump Map)]
		//BUMP
		_BumpMap ("Normal map (RGB)", 2D) = "bump" {}
	/// IF TEXTURE_BLENDING && TEXBLEND_BUMP
		/// IF BLEND_TEX1
		[NoScaleOffset] _BumpMap1 ("Normal map 1", 2D) = "bump" {}
		///
		/// IF BLEND_TEX2
		[NoScaleOffset] _BumpMap2 ("Normal map 2", 2D) = "bump" {}
		///
		/// IF BLEND_TEX3
		[NoScaleOffset] _BumpMap3 ("Normal map 3", 2D) = "bump" {}
		///
		/// IF BLEND_TEX4
		[NoScaleOffset] _BumpMap4 ("Normal map 4", 2D) = "bump" {}
		///
	///
	/// IF BUMP_SCALE
		_BumpScale ("Scale", Float) = 1.0
	///
	/// IF PARALLAX
		[NoScaleOffset] _ParallaxMap ("Heightmap (Alpha)", 2D) = "black" {}
		_Parallax ("Height", Range (0.005, 0.08)) = 0.02
	///
	[TCP2Separator]
///
/// IF OCCLUSION
	
	[TCP2HeaderHelp(AMBIENT OCCLUSION, Ambient Occlusion)]
		//AMBIENT OCCLUSION
	/// IF OCCL_RGB
		_OcclusionMap ("Occlusion (RGB)", 2D) = "white" {}
	/// ELSE
		_OcclusionMap ("Occlusion (Alpha)", 2D) = "white" {}
	///
	[TCP2Separator]
///
/// IF SPECULAR || SPECULAR_ANISOTROPIC
	
	[TCP2HeaderHelp(SPECULAR, Specular)]
		//SPECULAR
		_SpecColor ("Specular Color", Color) = (0.5, 0.5, 0.5, 1)
		_Shininess ("Shininess", Range(0.0,2)) = 0.1
	/// IF SPECULAR_ANISOTROPIC
		_AnisoBrush ("Anisotropic Spread", Range(0.0,2)) = 1.0
	///
	/// IF SPECULAR_TOON
		_SpecSmooth ("Smoothness", Range(0,1)) = 0.05
	///
	[TCP2Separator]
///
/// IF REFLECTION
	
	[TCP2HeaderHelp(REFLECTION, Reflection)]
		//REFLECTION
		[NoScaleOffset] _Cube ("Reflection Cubemap", Cube) = "_Skybox" {}
	/// IF U5_REFLPROBE
		_ReflSmoothness ("Reflection Smoothness", Range(0.0,1.0)) = 1
	///
	/// IF REFL_COLOR
		_ReflectColor ("Reflection Color (RGB) Strength (Alpha)", Color) = (1,1,1,0.5)
	///
	/// IF REFL_ROUGH
		_ReflectRoughness ("Reflection Roughness", Range(0,9)) = 0
	///
	[TCP2Separator]
///
/// IF RIM || RIM_OUTLINE
	
	[TCP2HeaderHelp(RIM, Rim)]
		//RIM LIGHT
		_RimColor ("Rim Color", Color) = (0.8,0.8,0.8,0.6)
		_RimMin ("Rim Min", Range(0,1)) = 0.5
		_RimMax ("Rim Max", Range(0,1)) = 1.0
	/// IF RIMDIR
		//RIM DIRECTION
		_RimDir ("Rim Direction", Vector) = (0.0,0.0,1.0,0.0)
	///
	[TCP2Separator]
///
/// IF MATCAP
	
	[TCP2HeaderHelp(MATCAP, MatCap)]
		//MATCAP
	/// IF MATCAP_ADD
		[NoScaleOffset] _MatCap ("MatCap (RGB)", 2D) = "black" {}
	/// ELIF MATCAP_MULT
		[NoScaleOffset] _MatCap ("MatCap (RGB)", 2D) = "white" {}
	///
	/// IF MC_COLOR
		_MatCapColor ("MatCap Color (RGB) Strength (Alpha)", Color) = (1,1,1,1)
	///
	[TCP2Separator]
///
/// IF SKETCH || SKETCH_GRADIENT
	
	[TCP2HeaderHelp(SKETCH, Sketch)]
		//SKETCH
		_SketchTex ("Sketch (Alpha)", 2D) = "white" {}
	/// IF SKETCH_ANIM
		_SketchSpeed ("Sketch Anim Speed", Range(1.1, 10)) = 6
	///
	/// IF SKETCH_GRADIENT
		_SketchColor ("Sketch Color (RGB)", Color) = (0,0,0,1)
		_SketchHalftoneMin ("Sketch Halftone Min", Range(0,1)) = 0.2
		_SketchHalftoneMax ("Sketch Halftone Max", Range(0,1)) = 1.0
	///
	[TCP2Separator]
///
/// IF DISSOLVE
	
	[TCP2HeaderHelp(DISSOLVE)]
	/// IF !DISSOLVE_UV
		[NoScaleOffset]
	///
		_DissolveMap ("Dissolve Map", 2D) = "white" {}
		_DissolveValue ("Dissolve Value", Range(0,1)) = 0.5
	/// IF DISSOLVE_GRADIENT
		[TCP2Gradient] _DissolveRamp ("Dissolve Ramp", 2D) = "white" {}
		_DissolveGradientWidth ("Ramp Width", Range(0,1)) = 0.2
	///
	[TCP2Separator]
///
/// IF CUBE_AMBIENT || DIRAMBIENT
	
	[TCP2HeaderHelp(CUSTOM AMBIENT)]
///
/// IF CUBE_AMBIENT
		//AMBIENT CUBEMAP
		_AmbientCube ("Ambient Cubemap", Cube) = "_Skybox" {}
///
/// IF DIRAMBIENT
		_TCP2_AMBIENT_RIGHT ("Right", Color) = (0,0,0,1)
		_TCP2_AMBIENT_LEFT ("Left", Color) = (0,0,0,1)
		_TCP2_AMBIENT_TOP ("Top", Color) = (0,0,0,1)
		_TCP2_AMBIENT_BOTTOM ("Bottom", Color) = (0,0,0,1)
		_TCP2_AMBIENT_FRONT ("Front", Color) = (0,0,0,1)
		_TCP2_AMBIENT_BACK ("Back", Color) = (0,0,0,1)
///
/// IF CUBE_AMBIENT || DIRAMBIENT
	[TCP2Separator]
///
/// IF OUTLINE || OUTLINE_BLENDING
	
	[TCP2HeaderHelp(OUTLINE, Outline)]
		//OUTLINE
		_OutlineColor ("Outline Color", Color) = (0.2, 0.2, 0.2, 1.0)
		_Outline ("Outline Width", Float) = 1
		
		//Outline Textured
		[Toggle(TCP2_OUTLINE_TEXTURED)] _EnableTexturedOutline ("Color from Texture", Float) = 0
		[TCP2KeywordFilter(TCP2_OUTLINE_TEXTURED)] _TexLod ("Texture LOD", Range(0,10)) = 5
		
		//Constant-size outline
		[Toggle(TCP2_OUTLINE_CONST_SIZE)] _EnableConstSizeOutline ("Constant Size Outline", Float) = 0
		
		//ZSmooth
		[Toggle(TCP2_ZSMOOTH_ON)] _EnableZSmooth ("Correct Z Artefacts", Float) = 0
		//Z Correction & Offset
		[TCP2KeywordFilter(TCP2_ZSMOOTH_ON)] _ZSmooth ("Z Correction", Range(-3.0,3.0)) = -0.5
		[TCP2KeywordFilter(TCP2_ZSMOOTH_ON)] _Offset1 ("Z Offset 1", Float) = 0
		[TCP2KeywordFilter(TCP2_ZSMOOTH_ON)] _Offset2 ("Z Offset 2", Float) = 0
		
		//This property will be ignored and will draw the custom normals GUI instead
		[TCP2OutlineNormalsGUI] __outline_gui_dummy__ ("unused", Float) = 0
	/// IF OUTLINE_BLENDING
		//Blending
		[TCP2Header(OUTLINE BLENDING)]
		[Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendOutline ("Blending Source", Float) = 5
		[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendOutline ("Blending Dest", Float) = 10
	///
	[TCP2Separator]
///
/// IF ALPHA || CUTOUT
	
	[TCP2HeaderHelp(TRANSPARENCY)]
///
/// IF ALPHA
		//Blending
		[Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendTCP2 ("Blending Source", Float) = 5
		[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendTCP2 ("Blending Dest", Float) = 10
///
/// IF CUTOUT
		//Alpha Testing
		_Cutoff ("Alpha cutoff", Range(0,1)) = 0.5
///
		
		//Avoid compile error if the properties are ending with a drawer
		[HideInInspector] __dummy__ ("unused", Float) = 0
	}
	
	SubShader
	{
	
		CGINCLUDE
		
		//Curved World include - change the path here if you moved the file out of its default directory
		#include "Assets/VacuumShaders/Curved World/Shaders/cginc/CurvedWorld_Base.cginc"
		
		ENDCG
	
/// IF ALPHA || CUTOUT || DISSOLVE
	/// IF ALPHA
		Tags {"Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent"}
		Blend [_SrcBlendTCP2] [_DstBlendTCP2]
	/// ELIF CUTOUT || DISSOLVE || ALPHA_TO_COVERAGE
		Tags {"Queue"="AlphaTest" "IgnoreProjector"="True" "RenderType"="CurvedWorld_TransparentCutout"}
	  /// IF ALPHA_TO_COVERAGE
		AlphaToMask On
	  ///
	///
/// ELSE
		Tags { "RenderType"="CurvedWorld_Opaque" }
///
/// IF CULL_OFF
		Cull Off
/// ELIF CULL_FRONT
		Cull Front
///
/// IF (OUTLINE || OUTLINE_BLENDING) && OUTLINE_BEHIND
		
		CGINCLUDE

		struct a2v
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
		#if TCP2_OUTLINE_TEXTURED
			float3 texcoord : TEXCOORD0;
		#endif
		#if TCP2_COLORS_AS_NORMALS
			float4 color : COLOR;
		#elif TCP2_UV2_AS_NORMALS
			float2 uv2 : TEXCOORD1;
		#endif
			float4 tangent : TANGENT;
		}; 
		
		struct v2f
		{
			float4 pos : SV_POSITION;
		#if TCP2_OUTLINE_TEXTURED
			float3 texlod : TEXCOORD1;
		#endif
		};
		
		float _Outline;
		float _ZSmooth;
		fixed4 _OutlineColor;
		
	#if TCP2_OUTLINE_TEXTURED
		sampler2D _MainTex;
		float4 _MainTex_ST;
		float _TexLod;
	#endif

		v2f TCP2_Outline_Vert(a2v v)
		{
			v2f o;
			
			//Curved World
			V_CW_TransformPointAndNormal(v.vertex, v.normal, v.tangent);
			
		//Correct Z artefacts
		#if TCP2_ZSMOOTH_ON
			float4 pos = float4(UnityObjectToViewPos(v.vertex), 1.0);
			
			#ifdef TCP2_COLORS_AS_NORMALS
				//Vertex Color for Normals
				float3 normal = mul( (float3x3)UNITY_MATRIX_IT_MV, (v.color.xyz*2) - 1 );
			#elif TCP2_TANGENT_AS_NORMALS
				//Tangent for Normals
				float3 normal = mul( (float3x3)UNITY_MATRIX_IT_MV, v.tangent.xyz);
			#elif TCP2_UV2_AS_NORMALS
				//UV2 for Normals
				float3 normal;
				//unpack uv2
				v.uv2.x = v.uv2.x * 255.0/16.0;
				normal.x = floor(v.uv2.x) / 15.0;
				normal.y = frac(v.uv2.x) * 16.0 / 15.0;
				//get z
				normal.z = v.uv2.y;
				//transform
				normal = mul( (float3x3)UNITY_MATRIX_IT_MV, normal*2-1);
			#else
				float3 normal = mul( (float3x3)UNITY_MATRIX_IT_MV, v.normal);
			#endif
			
			normal.z = -_ZSmooth;
			
			#ifdef TCP2_OUTLINE_CONST_SIZE
				//Camera-independent outline size
				float dist = distance(_WorldSpaceCameraPos, mul(unity_ObjectToWorld, v.vertex));
				pos = pos + float4(normalize(normal),0) * _Outline * 0.01 * dist;
			#else
				pos = pos + float4(normalize(normal),0) * _Outline * 0.01;
			#endif
			
		#else

			#ifdef TCP2_COLORS_AS_NORMALS
				//Vertex Color for Normals
				float3 normal = (v.color.xyz*2) - 1;
			#elif TCP2_TANGENT_AS_NORMALS
				//Tangent for Normals
				float3 normal = v.tangent.xyz;
			#elif TCP2_UV2_AS_NORMALS
				//UV2 for Normals
				float3 n;
				//unpack uv2
				v.uv2.x = v.uv2.x * 255.0/16.0;
				n.x = floor(v.uv2.x) / 15.0;
				n.y = frac(v.uv2.x) * 16.0 / 15.0;
				//get z
				n.z = v.uv2.y;
				//transform
				n = n*2 - 1;
				float3 normal = n;
			#else
				float3 normal = v.normal;
			#endif
			
			//Camera-independent outline size
			#ifdef TCP2_OUTLINE_CONST_SIZE
				float dist = distance(_WorldSpaceCameraPos, mul(unity_ObjectToWorld, v.vertex));
				float4 pos = float4(UnityObjectToViewPos(v.vertex + float4(normal,0) * _Outline * 0.01 * dist), 1.0);
			#else
				float4 pos = float4(UnityObjectToViewPos(v.vertex + float4(normal,0) * _Outline * 0.01), 1.0);
			#endif
		#endif
			
			o.pos = mul(UNITY_MATRIX_P, pos);
			
		#if TCP2_OUTLINE_TEXTURED
			half2 uv = TRANSFORM_TEX(v.texcoord, _MainTex);
			o.texlod = tex2Dlod(_MainTex, float4(uv, 0, _TexLod)).rgb;
		#endif
			
			return o;
		}

		float4 TCP2_Outline_Frag (v2f IN) : COLOR
		{
		#if TCP2_OUTLINE_TEXTURED
			return float4(IN.texlod, 1) * _OutlineColor;
		#else
			return _OutlineColor;
		#endif
		}

		ENDCG
		
		//Outlines
	/// IF OUTLINE
		Tags { "Queue"="Transparent" }
		/// IF FORCE_SM2

		Pass
		{
			Name "OUTLINE"

			Cull Off
			ZWrite Off
			Offset [_Offset1],[_Offset2]
			Tags { "LightMode"="ForwardBase" }

			CGPROGRAM

			#include "UnityCG.cginc"

			#pragma vertex TCP2_Outline_Vert
			#pragma fragment TCP2_Outline_Frag

			#pragma multi_compile TCP2_NONE TCP2_ZSMOOTH_ON
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_CONST_SIZE
			#pragma multi_compile TCP2_NONE TCP2_COLORS_AS_NORMALS TCP2_TANGENT_AS_NORMALS TCP2_UV2_AS_NORMALS

		ENDCG
		}

		/// ELSE
		
		Pass
		{
			Name "OUTLINE"
			
			Cull Off
			ZWrite Off
			Offset [_Offset1],[_Offset2]
			Tags { "LightMode"="ForwardBase" }
			
			CGPROGRAM
			
			#include "UnityCG.cginc"

			#pragma vertex TCP2_Outline_Vert
			#pragma fragment TCP2_Outline_Frag

			#pragma multi_compile TCP2_NONE TCP2_ZSMOOTH_ON
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_CONST_SIZE
			#pragma multi_compile TCP2_NONE TCP2_COLORS_AS_NORMALS TCP2_TANGENT_AS_NORMALS TCP2_UV2_AS_NORMALS
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_TEXTURED

			#pragma target 3.0

			ENDCG
		}
		
		///
	///
	/// IF OUTLINE_BLENDING
		Tags { "Queue"="Transparent" "RenderType"="Transparent" "IgnoreProjectors"="True" }
		/// IF FORCE_SM2

		Pass
		{
			Name "OUTLINE_BLENDING"

			Cull Off
			ZWrite Off
			Offset [_Offset1],[_Offset2]
			Tags { "LightMode"="ForwardBase" "Queue"="Transparent" "IgnoreProjectors"="True" "RenderType"="Transparent" }
			Blend [_SrcBlendOutline] [_DstBlendOutline]

			CGPROGRAM

			#include "UnityCG.cginc"

			#pragma vertex TCP2_Outline_Vert
			#pragma fragment TCP2_Outline_Frag

			#pragma multi_compile TCP2_NONE TCP2_ZSMOOTH_ON
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_CONST_SIZE
			#pragma multi_compile TCP2_NONE TCP2_COLORS_AS_NORMALS TCP2_TANGENT_AS_NORMALS TCP2_UV2_AS_NORMALS

		ENDCG
		}

		/// ELSE

		Pass
		{
			Name "OUTLINE_BLENDING"

			Cull Off
			ZWrite Off
			Offset [_Offset1],[_Offset2]
			Tags { "LightMode"="ForwardBase" "Queue"="Transparent" "IgnoreProjectors"="True" "RenderType"="Transparent" }
			Blend [_SrcBlendOutline] [_DstBlendOutline]

			CGPROGRAM

			#include "UnityCG.cginc"

			#pragma vertex TCP2_Outline_Vert
			#pragma fragment TCP2_Outline_Frag

			#pragma multi_compile TCP2_NONE TCP2_ZSMOOTH_ON
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_CONST_SIZE
			#pragma multi_compile TCP2_NONE TCP2_COLORS_AS_NORMALS TCP2_TANGENT_AS_NORMALS TCP2_UV2_AS_NORMALS
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_TEXTURED

			#pragma target 3.0

			ENDCG
		}

		///
	///
///
		
		CGPROGRAM
		
/// IF !CUSTOM_LIGHTING
		#include "@%INCLUDE_PATH%@/TCP2_Include.cginc"
///
/// IF DX11_TESSELLATION
		#include "Tessellation.cginc"
///
		#pragma surface surf @%LIGHTING_MODEL%@ @%SURF_PARAMS%@ exclude_path:deferred exclude_path:prepass vertex:vert addshadow
		#pragma target @%SHADER_TARGET%@
/// IF TEXTURE_RAMP
		#pragma multi_compile TCP2_RAMPTEXT
///
/// IF SPECULAR_TOON
		#pragma multi_compile TCP2_SPEC_TOON
///
		
		//================================================================
		// VARIABLES
		
		fixed4 _Color;
/// IF COLORMASK_SEPARATE
		fixed4 _MaskedColor;
///
/// IF TEXBLEND_UNITY_SPLATMAP
		sampler2D _Control;
/// ELIF TEXBLEND_MAP
		sampler2D _TexBlendMap;
///
		sampler2D @%MAIN_TEX%@;
/// IF HSV_CONTROLS
		float _HSV_H;
		float _HSV_S;
		float _HSV_V;
///
/// IF MASK1
		sampler2D _Mask1;
///
/// IF MASK2
		sampler2D _Mask2;
///
/// IF MASK3
		sampler2D _Mask3;
///
/// IF TEXTURE_BLENDING
	/// IF TEXBLEND_NORMALIZE
		float _BlendContrast;
	///
	/// IF TEXBLEND_HEIGHT
		float4 _VColorBlendSmooth;
		float4 _VColorBlendOffset;
	///
	/// IF BLEND_TEX1
		sampler2D _BlendTex1;
		float4 _BlendTex1_ST;
	///
	/// IF BLEND_TEX2
		sampler2D _BlendTex2;
		float4 _BlendTex2_ST;
	///
	/// IF BLEND_TEX3
		sampler2D _BlendTex3;
		float4 _BlendTex3_ST;
	///
	/// IF BLEND_TEX4
		sampler2D _BlendTex4;
		float4 _BlendTex4_ST;
	///
///
/// IF TRIPLANAR
		float4 @%MAIN_TEX%@_ST;
		float4 _TriplanarBlendStrength;
	/// IF TRIPLANAR_HEIGHT_SIDES || TRIPLANAR_HEIGHT_GROUND
		float _TriplanarHeightOffset;
		float _TriplanarHeightSmooth;
	///
	/// IF TRIPLANAR_SIDES_XY
		sampler2D _TriSideX;
		sampler2D _TriSideZ;
		float4 _TriSideX_ST;
		float4 _TriSideZ_ST;
	/// ELSE
		sampler2D _TriSide;
		float4 _TriSide_ST;
	///
	/// IF TRIPLANAR_CEILING
		sampler2D _TriCeiling;
		float4 _TriCeiling_ST;
		/// IF TRIPLANAR_CEILING_MINMAX
		float _CeilMin;
		float _CeilMax;
		///
	///
///
/// IF DETAIL_TEX
		sampler2D _Detail;
///
/// IF TEXTURED_THRESHOLD
		sampler2D _ThresholdTex;
///
/// IF DISSOLVE
		sampler2D _DissolveMap;
		half _DissolveValue;
	/// IF DISSOLVE_GRADIENT
		sampler2D _DissolveRamp;
		half _DissolveGradientWidth;
	///
///
/// IF CUBE_AMBIENT
		samplerCUBE _AmbientCube;
///
/// IF REFLECTION
	/// IF !U5_REFLPROBE
		samplerCUBE _Cube;
	/// ELSE
		fixed _ReflSmoothness;
	///
	/// IF REFL_COLOR
		fixed4 _ReflectColor;
	///
	/// IF REFL_ROUGH
		fixed _ReflectRoughness;
	///
///
/// IF EMISSION_COLOR
	/// IF EMISSION_COLOR_HDR
		half4 _EmissionColor;
	/// ELSE
		fixed4 _EmissionColor;
	///
///
/// IF SUBSURFACE_SCATTERING
		half _SSDistortion;
		half _SSPower;
		half _SSScale;
	/// IF SUBSURFACE_COLOR
		fixed4 _SSColor;
	///
	/// IF SUBSURFACE_AMB_COLOR
		fixed4 _SSAmbColor;
	///
///
/// IF MATCAP
		sampler2D _MatCap;
	/// IF MC_COLOR
		fixed4 _MatCapColor;
	///
///
/// IF SKETCH_ANIM
		fixed _SketchSpeed;
///
/// IF BUMP
		sampler2D _BumpMap;
	/// IF TEXTURE_BLENDING && TEXBLEND_BUMP
		/// IF BLEND_TEX1
		sampler2D _BumpMap1;
		///
		/// IF BLEND_TEX2
		sampler2D _BumpMap2;
		///
		/// IF BLEND_TEX3
		sampler2D _BumpMap3;
		///
		/// IF BLEND_TEX4
		sampler2D _BumpMap4;
		///
	///
	/// IF BUMP_SCALE
		half _BumpScale;
	///
	/// IF PARALLAX
		sampler2D _ParallaxMap;
		float _Parallax;
	///
///
/// IF OCCLUSION
		sampler2D _OcclusionMap;
///
/// IF SPECULAR || SPECULAR_ANISOTROPIC
		fixed _Shininess;
	/// IF SPECULAR_ANISOTROPIC
		float _AnisoBrush;
	///
///
/// IF RIM || RIM_OUTLINE
		fixed4 _RimColor;
		fixed _RimMin;
		fixed _RimMax;
		float4 _RimDir;
///
/// IF (SKETCH || SKETCH_GRADIENT) && SKETCH_ANIM
		fixed4 _Random;
///
/// IF CUTOUT
		fixed _Cutoff;
///
		
		struct Input
		{
			half2 uv@%MAIN_TEX%@;
/// IF TEXBLEND_UNITY_SPLATMAP
			half2 uv_Control;
/// ELIF TEXBLEND_MAP
			half2 uv_TexBlendMap;
///
/// IF DETAIL_TEX
	/// IF DETAIL_UV2
			half2 uv2_Detail;
	/// ELSE
			half2 uv_Detail;
	///
///
/// IF UVMASK1
			half2 uv_Mask1;
/// ELIF UVMASK1_UV2
			half2 uv2_Mask1;
///
/// IF UVMASK2
			half2 uv_Mask2;
/// ELIF UVMASK2_UV2
			half2 uv2_Mask2;
///
/// IF UVMASK3
			half2 uv_Mask3;
/// ELIF UVMASK3_UV2
			half2 uv2_Mask3;
///
/// IF SPECULAR_ANISOTROPIC
			fixed3 tangentDir;
///
/// IF BUMP
			half2 uv_BumpMap;
///
/// IF U5_REFLPROBE || TRIPLANAR
			float3 worldPos;
///
/// IF REFLECTION
			float3 worldRefl;
///
/// IF (REFLECTION && U5_REFLPROBE) || CUBE_AMBIENT || TRIPLANAR
			float3 worldNormal;
///
/// IF (REFLECTION || CUBE_AMBIENT) && BUMP
			INTERNAL_DATA
///
/// IF RIM_VERTEX && PARALLAX
			float3 viewDir;
///
/// IF (RIM || RIM_OUTLINE) && RIMDIR && BUMP && !RIM_VERTEX
			float3 bViewDir;
/// ELIF (PARALLAX || RIM || RIM_OUTLINE) && !RIM_VERTEX
			float3 viewDir;
///
/// IF RIM_VERTEX
	/// IF RIM_OUTLINE
			fixed rim;
	/// ELIF RIM
			fixed3 rim;
	///
///
/// IF MATCAP
	/// IF MATCAP_PIXEL && BUMP
			half3 matcap0;
			half3 matcap1;
	/// ELSE
			half2 matcap;
	///
///
/// IF SKETCH || SKETCH_GRADIENT
	/// IF SKETCH_VERTEX
			half2 sketchUv;
	/// ELSE
			half4 sketchUv;
	///
///
/// IF USE_VERTEX_COLORS
			float4 color : COLOR;
///
/// IF TEXTURED_THRESHOLD
			half2 uv_ThresholdTex;
///
/// IF DIRAMBIENT || (CUSTOM_AMBIENT && OCCLUSION && !CUBE_AMBIENT)
			fixed3 ambient;
///
/// IF DISSOLVE && DISSOLVE_UV
			half2 uv_DissolveMap;
///
/// IF USE_VFACE
			float vFace : VFACE;
///
		};
/// IF CUSTOM_LIGHTING
		
		//================================================================
		// CUSTOM LIGHTING
		
		//Lighting-related variables
		fixed4 _HColor;
		fixed4 _SColor;
	/// IF WRAP_CUSTOM
		half _WrapFactor;
	///
	/// IF COLOR_MULTIPLIERS
		fixed _HighlightMultiplier;
		fixed _ShadowMultiplier;
	///
	/// IF TEXTURE_RAMP
		sampler2D _Ramp;
	  /// IF RAMP_MAIN_OTHER
		sampler2D _RampOtherLights;
	  /// ELIF RAMP_MAIN_LIGHTTYPE
		sampler2D _RampPoint;
		sampler2D _RampSpot;
		sampler2D _RampDir;
	  ///
	/// ELIF RGB_RAMP
		float4 _RampThresholdRGB;
		half _RampSmooth;
	  /// IF RAMP_MAIN_OTHER
		float4 _RampThresholdOtherLightsRGB;
		half _RampSmoothOtherLights;
	  /// ELIF RAMP_MAIN_LIGHTTYPE
		half4 _RampThresholdPointRGB;
		fixed _RampSmoothPoint;
		half4 _RampThresholdSpotRGB;
		fixed _RampSmoothSpot;
		half4 _RampThresholdDirRGB;
		fixed _RampSmoothDir;
	  ///
	/// ELSE
		half _RampThreshold;
		half _RampSmooth;
	  /// IF RAMP_MAIN_OTHER
		half _RampThresholdOtherLights;
		half _RampSmoothOtherLights;
	  /// ELIF RAMP_MAIN_LIGHTTYPE
		half _RampThresholdPoint;
		half _RampSmoothPoint;
		half _RampThresholdSpot;
		half _RampSmoothSpot;
		half _RampThresholdDir;
		half _RampSmoothDir;
	  ///
	///
	/// IF SPECULAR_TOON
		fixed _SpecSmooth;
	///
	/// IF SKETCH || SKETCH_GRADIENT
		sampler2D _SketchTex;
		float4 _SketchTex_ST;
		/// IF SKETCH_GRADIENT
		fixed4 _SketchColor;
		fixed _SketchHalftoneMin;
		fixed _SketchHalftoneMax;
		///
	///
	/// IF DIFFUSE_TINT
		fixed4 _DiffTint;
	///
		
		//Custom SurfaceOutput
		struct SurfaceOutputCustom
		{
	/// IF !LIGHTING_UNITY4
			half atten;
	///
	/// IF BYPASS_POINT_FALLOFF || BYPASS_SPOT_FALLOFF
			float4 WorldPos_LightCoords;	//WorldPos for POINT, LightCoords for SPOT
	///
			fixed3 Albedo;
			fixed3 Normal;
			fixed3 Emission;
			half Specular;
			fixed Gloss;
			fixed Alpha;
	/// IF SKETCH || SKETCH_GRADIENT
			half2 ScreenUVs;
	///
	/// IF SPECULAR_ANISOTROPIC
			fixed3 Tangent;
	///
	/// IF TEXTURED_THRESHOLD
			fixed TexThreshold;
	///
	/// IF RIM && RIM_LIGHTMASK
			fixed3 NdlColor;
			fixed Rim;
	///
	/// IF SUBSURFACE_SCATTERING && SS_MASK
			fixed SubsurfaceMask;
	///
	/// IF USE_VFACE
			float vFace;
	///
		};
		
	/// IF BYPASS_POINT_FALLOFF || BYPASS_SPOT_FALLOFF
		//----------------------------------------------------------------------
		//Override UNITY_LIGHT_ATTENUATION macro
		// - Only include shadowmap in 'atten' for Point/Spot lights
		// - Falloff/cookie will be based on the ramp
		
		/// IF BYPASS_POINT_FALLOFF
	#ifdef POINT
		#if defined(UNITY_LIGHT_ATTENUATION)
			#undef UNITY_LIGHT_ATTENUATION
			#define UNITY_LIGHT_ATTENUATION(destName, input, worldPos) \
					fixed destName = SHADOW_ATTENUATION(input); \
					o.WorldPos_LightCoords = float4(worldPos.xyz, 1);	// o = SurfaceOutputCustom, avoid recalculating worldPos
		#endif
	#endif
		///
		/// IF BYPASS_SPOT_FALLOFF
	#ifdef SPOT
		#if defined(UNITY_LIGHT_ATTENUATION)
			#undef UNITY_LIGHT_ATTENUATION
			#define UNITY_LIGHT_ATTENUATION(destName, input, worldPos) \
					unityShadowCoord4 lightCoord = mul(unity_WorldToLight, unityShadowCoord4(worldPos, 1)); \
					fixed destName = (lightCoord.z > 0) * SHADOW_ATTENUATION(input); \
					o.WorldPos_LightCoords = lightCoord;	// o = SurfaceOutputCustom, avoid recalculating worldPos
		#endif
	#endif
		///
		//----------------------------------------------------------------------
		
	///
	/// IF LIGHTING_UNITY4
		inline half4 LightingToonyColorsCustom (inout SurfaceOutputCustom s, half3 lightDir, half3 viewDir, half atten)
	/// ELSE
		inline half4 LightingToonyColorsCustom (inout SurfaceOutputCustom s, half3 viewDir, UnityGI gi)
	///
		{
	/// IF !LIGHTING_UNITY4
			half3 lightDir = gi.light.dir;
		#if defined(UNITY_PASS_FORWARDBASE)
			half3 lightColor = _LightColor0.rgb;
			half atten = s.atten;
		#else
			half3 lightColor = gi.light.color.rgb;
			half atten = 1;
		#endif
	/// ELSE
			half3 lightColor = _LightColor0.rgb;
	///
	/// IF BYPASS_POINT_FALLOFF
			
		#if POINT
			float4 lightCoord = mul(unity_WorldToLight, s.WorldPos_LightCoords);
			float lightFalloff = 1 - dot(lightCoord.xyz, lightCoord.xyz);
		#endif
	///
	/// IF BYPASS_SPOT_FALLOFF
			
		#if SPOT
			float4 lightCoord = s.WorldPos_LightCoords;
			float lightFalloff = 1 - dot(lightCoord.xyz, lightCoord.xyz);
			//custom cookie so that it follows a 1D ramp instead of the built-in 2D circle texture
			float2 cookieCoords = lightCoord.xy / lightCoord.w;
			float rampCoords = saturate(1 - dot(cookieCoords, cookieCoords) * 4) * lightFalloff;
		#endif
	///
			
			s.Normal = normalize(s.Normal);
	/// IF USE_VFACE
			s.Normal.z *= s.vFace;
	///
	/// IF ENABLE_WRAPPED_LIGHTING
			fixed ndl = max(0, dot(s.Normal, lightDir) * 0.5 + 0.5);
	/// ELIF WRAP_CUSTOM
			fixed ndl = max(0, (dot(s.Normal, lightDir) + _WrapFactor) / (1+_WrapFactor));
	/// ELSE
			fixed ndl = max(0, dot(s.Normal, lightDir));
	///
	/// IF RIM && RIM_LIGHTMASK
			s.NdlColor = ndl * lightColor.rgb * atten;
	///
	/// IF BYPASS_POINT_FALLOFF
		#if POINT
			ndl *= lightFalloff;
		#endif
	///
	/// IF BYPASS_SPOT_FALLOFF 
		#if SPOT
			#define NDL	rampCoords
		#else
			#define NDL ndl
		#endif
	/// ELSE
			#define NDL ndl
	///
	/// IF TEXTURED_THRESHOLD
			NDL += s.TexThreshold;
	///
	
  /// IF TEXTURE_RAMP
#===============================================================================
# TEXTURE RAMP
#===============================================================================

	/// IF RAMP_MAIN_OTHER
		#if defined(UNITY_PASS_FORWARDBASE)
			#define		RAMP_TEXTURE	_Ramp
		#else
			#define		RAMP_TEXTURE	_RampOtherLights
		#endif
	/// ELIF RAMP_MAIN_LIGHTTYPE
		#if defined(UNITY_PASS_FORWARDBASE)
			#define		RAMP_TEXTURE	_Ramp
		#else
		  #if POINT
			#define		RAMP_TEXTURE	_RampPoint
		  #elif SPOT
			#define		RAMP_TEXTURE	_RampSpot
		  #else
			#define		RAMP_TEXTURE	_RampDir
		  #endif
		#endif
	/// ELSE
			#define		RAMP_TEXTURE	_Ramp
	///
  /// ELIF RGB_RAMP
#===============================================================================
# RGB RAMP
#===============================================================================
	/// IF RAMP_MAIN_OTHER
		#if defined(UNITY_PASS_FORWARDBASE)
			#define		RAMP_THRESHOLD	(1-_RampThresholdRGB.rgb)
			#define		RAMP_SMOOTH		_RampSmooth.xxx
		#else
			#define		RAMP_THRESHOLD	(1-_RampThresholdOtherLightsRGB.rgb)
			#define		RAMP_SMOOTH		_RampSmoothOtherLights.xxx
		#endif
	/// ELIF RAMP_MAIN_LIGHTTYPE
		#if defined(UNITY_PASS_FORWARDBASE)
			#define		RAMP_THRESHOLD	(1-_RampThresholdRGB.rgb)
			#define		RAMP_SMOOTH		_RampSmooth.xxx
		#else
		  #if POINT
			#define		RAMP_THRESHOLD	(1-_RampThresholdPointRGB.rgb)
			#define		RAMP_SMOOTH		_RampSmoothPoint.xxx
		  #elif SPOT
			#define		RAMP_THRESHOLD	(1-_RampThresholdSpotRGB.rgb)
			#define		RAMP_SMOOTH		_RampSmoothSpot.xxx
		  #else
			#define		RAMP_THRESHOLD	(1-_RampThresholdDirRGB.rgb)
			#define		RAMP_SMOOTH		_RampSmoothDir.xxx
		  #endif
		#endif
	/// ELSE
			#define		RAMP_THRESHOLD	(1-_RampThresholdRGB.rgb)
			#define		RAMP_SMOOTH		_RampSmooth.xxx
	///
  /// ELSE
#===============================================================================
# SLIDER RAMP
#===============================================================================
	/// IF RAMP_MAIN_OTHER
		#if defined(UNITY_PASS_FORWARDBASE)
			#define		RAMP_THRESHOLD	_RampThreshold
			#define		RAMP_SMOOTH		_RampSmooth
		#else
			#define		RAMP_THRESHOLD	_RampThresholdOtherLights
			#define		RAMP_SMOOTH		_RampSmoothOtherLights
		#endif
	/// ELIF RAMP_MAIN_LIGHTTYPE
		#if defined(UNITY_PASS_FORWARDBASE)
			#define		RAMP_THRESHOLD	_RampThreshold
			#define		RAMP_SMOOTH		_RampSmooth
		#else
		  #if POINT
			#define		RAMP_THRESHOLD	_RampThresholdPoint
			#define		RAMP_SMOOTH		_RampSmoothPoint
		  #elif SPOT
			#define		RAMP_THRESHOLD	_RampThresholdSpot
			#define		RAMP_SMOOTH		_RampSmoothSpot
		  #else
			#define		RAMP_THRESHOLD	_RampThresholdDir
			#define		RAMP_SMOOTH		_RampSmoothDir
		  #endif
		#endif
	/// ELSE
			#define		RAMP_THRESHOLD	_RampThreshold
			#define		RAMP_SMOOTH		_RampSmooth
	///
  ///
			
	/// IF TEXTURE_RAMP
			fixed3 ramp = tex2D(RAMP_TEXTURE, fixed2(NDL,NDL)).rgb;
	/// ELSE
			fixed3 ramp = smoothstep(RAMP_THRESHOLD - RAMP_SMOOTH*0.5, RAMP_THRESHOLD + RAMP_SMOOTH*0.5, NDL);
	///
	/// IF BYPASS_SPOT_FALLOFF
		#if SPOT
			ramp *= ndl;
		#endif
	///
	/// IF BYPASS_POINT_FALLOFF
		#if POINT
			ramp *= step(0, lightFalloff);	//make sure to not exceed the point light circle range
		#endif
	///
	/// IF !INDEPENDENT_SHADOWS
	  /// IF !BYPASS_POINT_FALLOFF
		#if !(POINT) && !(SPOT)
	  ///
			ramp *= atten;
	  /// IF !BYPASS_POINT_FALLOFF
		#endif
	  ///
	///
	/// IF SKETCH || SKETCH_GRADIENT
			//Sketch
			fixed sketch = tex2D(_SketchTex, s.ScreenUVs).a;
		/// IF SKETCH_GRADIENT
			sketch = smoothstep(sketch - 0.2, sketch, clamp(ramp, _SketchHalftoneMin, _SketchHalftoneMax));	//Gradient halftone
		/// ELSE
			sketch = lerp(sketch, 1, ramp);	//Regular sketch overlay
		///
	///
	/// IF SKETCH && SKETCH_COLORBLEND
			_SColor.rgb = lerp(_SColor.rgb, fixed3(1,1,1), sketch);
	///
	/// IF !ENABLE_SHADOW_2ND_LIGHTS
		#if !defined(UNITY_PASS_FORWARDBASE)
			_SColor = fixed4(0,0,0,1);
		#endif
	///
	/// IF COLOR_MULTIPLIERS
			_SColor = lerp(_HColor, _SColor, _SColor.a * _ShadowMultiplier);	//Shadows intensity through alpha
			ramp = lerp(_SColor.rgb, _HColor.rgb * _HighlightMultiplier, ramp);
	/// ELSE
			_SColor = lerp(_HColor, _SColor, _SColor.a);	//Shadows intensity through alpha
			ramp = lerp(_SColor.rgb, _HColor.rgb, ramp);
	///
	/// IF DIFFUSE_TINT
			fixed3 wrappedLight = saturate(_DiffTint.rgb + saturate(dot(s.Normal, lightDir)));
			ramp *= wrappedLight;
	///
	/// IF SPECULAR || SPECULAR_ANISOTROPIC
			//Specular
			half3 h = normalize(lightDir + viewDir);
			float ndh = max(0, dot (s.Normal, h));
		/// IF SPECULAR_ANISOTROPIC
			half3 binorm = cross(s.Normal, s.Tangent);
			fixed ndv = dot(viewDir, s.Normal);
			float aX = dot(h, s.Tangent) / _AnisoBrush;
			float aY = dot(h, binorm) / _Shininess;
			float spec = sqrt(max(0.0, ndl / ndv)) * exp(-2.0 * (aX * aX + aY * aY) / (1.0 + ndh)) * s.Gloss * 2.0;
		/// ELSE
			float spec = pow(ndh, s.Specular*128.0) * s.Gloss * 2.0;
		///
		/// IF SPECULAR_TOON
			spec = smoothstep(0.5-_SpecSmooth*0.5, 0.5+_SpecSmooth*0.5, spec);
		///
			spec *= atten;
			fixed4 c;
			c.rgb = s.Albedo * lightColor.rgb * ramp;
		/// IF INDEPENDENT_SHADOWS
			c.rgb *= atten;
		/// ELSE
		#if (POINT || SPOT)
			c.rgb *= atten;
		#endif
		///
			c.rgb += lightColor.rgb * _SpecColor.rgb * spec;
			c.a = s.Alpha * _SpecColor.a * spec;
	/// ELSE
			fixed4 c;
			c.rgb = s.Albedo * lightColor.rgb * ramp;
			c.a = s.Alpha;
		/// IF INDEPENDENT_SHADOWS
			c.rgb *= atten;
		/// ELSE
		  /// IF LIGHTING_UNITY4
		#if (POINT || SPOT)
			c.rgb *= atten;
		#endif
		  ///
		///
	///
	/// IF SUBSURFACE_SCATTERING
		/// IF SS_ALL_LIGHTS
# nothing here: workaround so that point/spot lights are the default value
		/// ELIF SS_DIR_LIGHTS
		#if !(POINT) && !(SPOT)
		/// ELSE
		#if (POINT || SPOT)
		///
			//Subsurface Scattering
			half3 ssLight = lightDir + s.Normal * _SSDistortion;
			half ssDot = pow(saturate(dot(viewDir, -ssLight)), _SSPower) * _SSScale;
		/// IF SUBSURFACE_COLOR && SUBSURFACE_AMB_COLOR
			half3 ssColor = ((ssDot * _SSColor.rgb) + _SSAmbColor.rgb);
		/// ELIF SUBSURFACE_COLOR
			half3 ssColor = (ssDot * _SSColor.rgb);
		/// ELIF SUBSURFACE_AMB_COLOR
			half3 ssColor = (ssDot + _SSAmbColor.rgb);
		/// ELSE
			half3 ssColor = ssDot;
		///
		/// IF SS_MASK
			ssColor *= s.SubsurfaceMask;
		///
			ssColor.rgb *= lightColor.rgb;
		#if !defined(UNITY_PASS_FORWARDBASE)
			ssColor.rgb *= atten;
		#endif
		/// IF SS_MULTIPLICATIVE
			c.rgb *= s.Albedo * ssColor;
		/// ELSE
			c.rgb += s.Albedo * ssColor;
		///
		/// IF !SS_ALL_LIGHTS
		#endif
		///
	///
	/// IF SKETCH
		/// IF SKETCH_COLORBURN
			c.rgb = max((1.0 - ((1.0 - c.rgb) / sketch)), 0.0);
		/// ELIF !SKETCH_COLORBLEND
			c.rgb *= sketch;
		///
	/// ELIF SKETCH_GRADIENT
			c.rgb *= lerp(_SketchColor.rgb, fixed3(1,1,1), sketch);
	///
	/// IF !LIGHTING_UNITY4
			
		#ifdef UNITY_LIGHT_FUNCTION_APPLY_INDIRECT
			c.rgb += s.Albedo * gi.indirect.diffuse;
		#endif
	///
			
			return c;
		}
	/// IF !LIGHTING_UNITY4
		
		void LightingToonyColorsCustom_GI(inout SurfaceOutputCustom s, UnityGIInput data, inout UnityGI gi)
		{
			gi = UnityGlobalIllumination(data, 1.0, s.Normal);
			
			gi.light.color = _LightColor0.rgb;	//remove attenuation
			s.atten = data.atten;	//transfer attenuation to lighting function
		}
	///
///
/// IF (SKETCH || SKETCH_GRADIENT) && !NO_SKETCH_OFFSET
	
	//Adjust screen UVs relative to object to prevent screen door effect
	inline void ObjSpaceUVOffset(inout float2 screenUV, in float screenRatio)
	{
		// UNITY_MATRIX_P._m11 = Camera FOV
		float4 objPos = float4(-UNITY_MATRIX_T_MV[3].x * screenRatio * UNITY_MATRIX_P._m11, -UNITY_MATRIX_T_MV[3].y * UNITY_MATRIX_P._m11, UNITY_MATRIX_T_MV[3].z, UNITY_MATRIX_T_MV[3].w);
		
		float offsetFactorX = 0.5;
		float offsetFactorY = offsetFactorX * screenRatio;
	/// IF !SKETCH_VERTEX
		offsetFactorX *= _SketchTex_ST.x;
		offsetFactorY *= _SketchTex_ST.y;
	///
		
		if (unity_OrthoParams.w < 1)	//don't scale with orthographic camera
		{
			//adjust uv scale
			screenUV -= float2(offsetFactorX, offsetFactorY);
			screenUV *= objPos.z;	//scale with cam distance
			screenUV += float2(offsetFactorX, offsetFactorY);
			
			// sign(UNITY_MATRIX_P[1].y) is different in Scene and Game views
			screenUV.x -= objPos.x * offsetFactorX * sign(UNITY_MATRIX_P[1].y);
			screenUV.y -= objPos.y * offsetFactorY * sign(UNITY_MATRIX_P[1].y);
		}
		else
		{
			// sign(UNITY_MATRIX_P[1].y) is different in Scene and Game views
			screenUV.x += objPos.x * offsetFactorX * sign(UNITY_MATRIX_P[1].y);
			screenUV.y += objPos.y * offsetFactorY * sign(UNITY_MATRIX_P[1].y);
		}
	}
///

		//================================================================
		// VERTEX FUNCTION
		// Always enabled for Curved World
	/// IF (RIM || RIM_OUTLINE) && RIMDIR && BUMP && !RIM_VERTEX
		
		inline float3 TCP2_ObjSpaceViewDir( in float4 v )
		{
			float3 camPos = _WorldSpaceCameraPos;
			camPos += mul(_RimDir, UNITY_MATRIX_V).xyz;
			float3 objSpaceCameraPos = mul(unity_WorldToObject, float4(camPos, 1)).xyz;
			return objSpaceCameraPos - v.xyz;
		}
	///
	/// IF DIRAMBIENT
		
		fixed4 _TCP2_AMBIENT_RIGHT;
		fixed4 _TCP2_AMBIENT_LEFT;
		fixed4 _TCP2_AMBIENT_TOP;
		fixed4 _TCP2_AMBIENT_BOTTOM;
		fixed4 _TCP2_AMBIENT_FRONT;
		fixed4 _TCP2_AMBIENT_BACK;
		
		half3 DirAmbient (half3 normal)
		{
			fixed3 retColor =
				saturate( normal.x * _TCP2_AMBIENT_LEFT) +
				saturate(-normal.x * _TCP2_AMBIENT_RIGHT) +
				saturate( normal.y * _TCP2_AMBIENT_TOP) +
				saturate(-normal.y * _TCP2_AMBIENT_BOTTOM) +
				saturate( normal.z * _TCP2_AMBIENT_FRONT) +
				saturate(-normal.z * _TCP2_AMBIENT_BACK);
			return retColor * UNITY_LIGHTMODEL_AMBIENT.a;
		}
	///
		
		struct appdata_tcp2
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 texcoord : TEXCOORD0;
			float4 texcoord1 : TEXCOORD1;
			float4 texcoord2 : TEXCOORD2;
			float4 tangent : TANGENT;		//Needed for Curved World
	/// IF USE_VERTEX_COLORS
			fixed4 color : COLOR;
	///
		};
		
		void vert(inout appdata_tcp2 v, out Input o)
		{
			UNITY_INITIALIZE_OUTPUT(Input, o);
	/// IF (RIM || RIM_OUTLINE) && RIMDIR && BUMP && !RIM_VERTEX
			TANGENT_SPACE_ROTATION;
			o.bViewDir = mul(rotation, TCP2_ObjSpaceViewDir(v.vertex));
	///
	/// IF (RIM || RIM_OUTLINE) && RIM_VERTEX
		/// IF RIMDIR
			_RimDir.x += UNITY_MATRIX_MV[0][3] * (1/UNITY_MATRIX_MV[2][3]) * (1-UNITY_MATRIX_P[3][3]);
			_RimDir.y += UNITY_MATRIX_MV[1][3] * (1/UNITY_MATRIX_MV[2][3]) * (1-UNITY_MATRIX_P[3][3]);
			float3 viewDir = normalize(UNITY_MATRIX_V[0].xyz * _RimDir.x + UNITY_MATRIX_V[1].xyz * _RimDir.y + UNITY_MATRIX_V[2].xyz * _RimDir.z);
		/// ELSE
			float3 viewDir = normalize(ObjSpaceViewDir(v.vertex));
		///
			half rim = 1.0f - saturate( dot(viewDir, v.normal) );
		/// IF RIM_OUTLINE
			o.rim = smoothstep(_RimMin, _RimMax, rim) * _RimColor.a;
		/// ELSE
			o.rim = smoothstep(_RimMin, _RimMax, rim) * _RimColor.rgb * _RimColor.a;
		///
	///
	/// IF SKETCH || SKETCH_GRADIENT
			
			//Sketch
			float4 pos = UnityObjectToClipPos(v.vertex);
		/// IF SKETCH_VERTEX
			float4 screenPos = ComputeScreenPos(pos);
			float2 screenUV = screenPos.xy / screenPos.w;
			float screenRatio = _ScreenParams.y / _ScreenParams.x;
			screenUV.y *= screenRatio;
		  /// IF !NO_SKETCH_OFFSET
			ObjSpaceUVOffset(screenUV, screenRatio);
		  ///
			o.sketchUv = screenUV;
		/// ELSE
			o.sketchUv = ComputeScreenPos(pos);
		///
			o.sketchUv.xy = TRANSFORM_TEX(o.sketchUv, _SketchTex);
		/// IF SKETCH_VERTEX && SKETCH_ANIM
			_Random.x = round(_Time.z * _SketchSpeed) / _SketchSpeed;
			_Random.y = -round(_Time.z * _SketchSpeed) / _SketchSpeed;
			o.sketchUv.xy += frac(_Random.xy);
		///
	///
	/// IF MATCAP
			
			//MatCap
		/// IF MATCAP_PIXEL && BUMP
			v.normal = normalize(v.normal);
			TANGENT_SPACE_ROTATION;
			o.matcap0 = mul(rotation, normalize(UNITY_MATRIX_IT_MV[0].xyz));
			o.matcap1 = mul(rotation, normalize(UNITY_MATRIX_IT_MV[1].xyz));
		/// ELSE
			float3 worldNorm = normalize(unity_WorldToObject[0].xyz * v.normal.x + unity_WorldToObject[1].xyz * v.normal.y + unity_WorldToObject[2].xyz * v.normal.z);
			worldNorm = mul((float3x3)UNITY_MATRIX_V, worldNorm);
			o.matcap.xy = worldNorm.xy * 0.5 + 0.5;
		///
	///
	/// IF SPECULAR_ANISOTROPIC
			
			//Anisotropic Specular
			o.tangentDir = v.tangent.xyz;
	///
	/// IF DIRAMBIENT
			float3 worldN = mul((float3x3)unity_ObjectToWorld, SCALED_NORMAL);
		/// IF DIRAMBIENT_VIEW
			worldN = mul(UNITY_MATRIX_V, worldN);
		///
			o.ambient = DirAmbient(worldN);
	/// ELIF CUSTOM_AMBIENT && OCCLUSION && !CUBE_AMBIENT
			float3 worldN = mul((float3x3)unity_ObjectToWorld, SCALED_NORMAL);
			o.ambient = ShadeSH9(float4(worldN,1.0));
	///
	
			//Curved World
			V_CW_TransformPointAndNormal(v.vertex, v.normal, v.tangent);
		}
/// IF HSV_CONTROLS
		
		//================================================================
		// HSV HELPERS
		// source: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
		
		float3 rgb2hsv(float3 c)
		{
			float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
			float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));
			
			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}
		
		float3 hsv2rgb(float3 c)
		{
			c = float3(c.x, clamp(c.yz, 0.0, 1.0));
			float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
			return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}
///
/// IF TEXBLEND_HEIGHT
		
		// Height-based texture blending
		float4 blend_height_smooth(float4 texture1, float height1, float4 texture2, float height2, float smoothing)
		{
			float ma = max(texture1.a + height1, texture2.a + height2) - smoothing;
			float b1 = max(texture1.a + height1 - ma, 0);
			float b2 = max(texture2.a + height2 - ma, 0);
			return (texture1 * b1 + texture2 * b2) / (b1 + b2);
		}
///

		//================================================================
		// SURFACE FUNCTION

/// IF VCOLORS_MASK
	#define vcolor IN.color
	
///
/// IF CUSTOM_LIGHTING
		void surf(Input IN, inout SurfaceOutputCustom o)
/// ELSE
		void surf(Input IN, inout SurfaceOutput o)
///
		{
/// IF BUMP && PARALLAX
			//Parallax Offset
			fixed height = tex2D(_ParallaxMap, IN.uv_BumpMap).a;
		/// IF RIM_VERTEX || !RIMDIR
			float2 offset = ParallaxOffset(height, _Parallax, IN.viewDir);
		/// ELSE
			float2 offset = ParallaxOffset(height, _Parallax, IN.bViewDir);
		///
			IN.uv@%MAIN_TEX%@ += offset;
			IN.uv_BumpMap += offset;
///
/// IF !TRIPLANAR
			fixed4 mainTex = tex2D(@%MAIN_TEX%@, IN.uv@%MAIN_TEX%@);
///
/// IF MASK1 || MASK2 || MASK3
			
			//Masks
///
/// IF MASK1
	/// IF UVMASK1
			fixed4 mask1 = tex2D(_Mask1, IN.uv_Mask1);
	/// ELIF UVMASK1_UV2
			fixed4 mask1 = tex2D(_Mask1, IN.uv2_Mask1);
	/// ELSE
			fixed4 mask1 = tex2D(_Mask1, IN.uv@%MAIN_TEX%@);
	///
///
/// IF MASK2
	/// IF UVMASK2
			fixed4 mask2 = tex2D(_Mask2, IN.uv_Mask2);
	/// ELIF UVMASK2_UV2
			fixed4 mask2 = tex2D(_Mask2, IN.uv2_Mask2);
	/// ELSE
			fixed4 mask2 = tex2D(_Mask2, IN.uv@%MAIN_TEX%@);
	///
///
/// IF MASK3
	/// IF UVMASK3
			fixed4 mask3 = tex2D(_Mask3, IN.uv_Mask3);
	/// ELIF UVMASK3_UV2
			fixed4 mask3 = tex2D(_Mask3, IN.uv2_Mask3);
	/// ELSE
			fixed4 mask3 = tex2D(_Mask3, IN.uv@%MAIN_TEX%@);
	///
///
#Need the world pos UV to happen before vertex color blending, in case we use both triplanar + vcolors blending
/// IF TRIPLANAR
			
			//Triplanar Texture Blending
			half2 uv_ground = IN.worldPos.xz;
			half2 uv_sideX = IN.worldPos.xy;
			half2 uv_sideZ = IN.worldPos.zy;
			
			//ground
			fixed4 mainTex = tex2D(@%MAIN_TEX%@, uv_ground * @%MAIN_TEX%@_ST.xy + @%MAIN_TEX%@_ST.zw);
///
/// IF TEXTURE_BLENDING
			
			//Texture Blending
	/// IF TRIPLANAR
			#define MAIN_UV uv_ground
	/// ELSE
			#define MAIN_UV IN.uv@%MAIN_TEX%@
	///
	/// IF TEXBLEND_VCOLORS
			#define BLEND_SOURCE IN.color
	/// ELIF TEXBLEND_MAP
			float4 texblend_map = tex2D(_TexBlendMap, IN.uv_TexBlendMap);
			#define BLEND_SOURCE texblend_map
	/// ELIF TEXBLEND_UNITY_SPLATMAP
			float4 splat_control = tex2D(_Control, IN.uv_Control).gbar;
			#define BLEND_SOURCE splat_control
	///
	/// IF TEXBLEND_NORMALIZE
			BLEND_SOURCE.rgb = saturate(normalize(BLEND_SOURCE.rgb) * dot(_BlendContrast.xxx, BLEND_SOURCE.rgb));
	///
	/// IF TEXBLEND_LINEAR
		/// IF BLEND_TEX1
			fixed4 tex1 = tex2D(_BlendTex1, MAIN_UV * _BlendTex1_ST.xy + _BlendTex1_ST.zw);
			mainTex = lerp(mainTex, tex1, BLEND_SOURCE.@%BLEND_TEX1_CHNL%@);
		///
		/// IF BLEND_TEX2
			fixed4 tex2 = tex2D(_BlendTex2, MAIN_UV * _BlendTex2_ST.xy + _BlendTex2_ST.zw);
			mainTex = lerp(mainTex, tex2, BLEND_SOURCE.@%BLEND_TEX2_CHNL%@);
		///
		/// IF BLEND_TEX3
			fixed4 tex3 = tex2D(_BlendTex3, MAIN_UV * _BlendTex3_ST.xy + _BlendTex3_ST.zw);
			mainTex = lerp(mainTex, tex3, BLEND_SOURCE.@%BLEND_TEX3_CHNL%@);
		///
		/// IF BLEND_TEX4
			fixed4 tex4 = tex2D(_BlendTex4, MAIN_UV * _BlendTex4_ST.xy + _BlendTex4_ST.zw);
			mainTex = lerp(mainTex, tex4, BLEND_SOURCE.@%BLEND_TEX4_CHNL%@);
		///
	/// ELIF TEXBLEND_LINEAR_ADD
			float blackChannel = 1 - dot(BLEND_SOURCE.rgba, half4(1, 1, 1, 1));
			mainTex *= blackChannel;
	
		/// IF BLEND_TEX1
			fixed4 tex1 = tex2D(_BlendTex1, MAIN_UV * _BlendTex1_ST.xy + _BlendTex1_ST.zw);
			mainTex += tex1 * BLEND_SOURCE.@%BLEND_TEX1_CHNL%@;
		///
		/// IF BLEND_TEX2
			fixed4 tex2 = tex2D(_BlendTex2, MAIN_UV * _BlendTex2_ST.xy + _BlendTex2_ST.zw);
			mainTex += tex2 * BLEND_SOURCE.@%BLEND_TEX2_CHNL%@;
		///
		/// IF BLEND_TEX3
			fixed4 tex3 = tex2D(_BlendTex3, MAIN_UV * _BlendTex3_ST.xy + _BlendTex3_ST.zw);
			mainTex += tex3 * BLEND_SOURCE.@%BLEND_TEX3_CHNL%@;
		///
		/// IF BLEND_TEX4
			fixed4 tex4 = tex2D(_BlendTex4, MAIN_UV * _BlendTex4_ST.xy + _BlendTex4_ST.zw);
			mainTex += tex4 * BLEND_SOURCE.@%BLEND_TEX4_CHNL%@;
		///
	/// ELIF TEXBLEND_HEIGHT
			
			#define CONTRAST @%TEXBLEND_HEIGHT_CONTRAST%@
			#define CONTRAST_half CONTRAST/2
			
		/// IF BLEND_TEX1
			fixed4 tex1 = tex2D(_BlendTex1, MAIN_UV * _BlendTex1_ST.xy + _BlendTex1_ST.zw);
			mainTex = lerp(mainTex, blend_height_smooth(mainTex, mainTex.a, tex1, BLEND_SOURCE.r * CONTRAST - CONTRAST_half + tex1.a + _VColorBlendOffset.x, _VColorBlendSmooth.x), saturate(BLEND_SOURCE.r * CONTRAST_half));
		///
		/// IF BLEND_TEX2
			fixed4 tex2 = tex2D(_BlendTex2, MAIN_UV * _BlendTex2_ST.xy + _BlendTex2_ST.zw);
			mainTex = lerp(mainTex, blend_height_smooth(mainTex, mainTex.a, tex2, BLEND_SOURCE.g * CONTRAST - CONTRAST_half + tex2.a + _VColorBlendOffset.y, _VColorBlendSmooth.y), saturate(BLEND_SOURCE.g * CONTRAST_half));
		///
		/// IF BLEND_TEX3
			fixed4 tex3 = tex2D(_BlendTex3, MAIN_UV * _BlendTex3_ST.xy + _BlendTex3_ST.zw);
			mainTex = lerp(mainTex, blend_height_smooth(mainTex, mainTex.a, tex3, BLEND_SOURCE.b * CONTRAST - CONTRAST_half + tex3.a + _VColorBlendOffset.z, _VColorBlendSmooth.z), saturate(BLEND_SOURCE.b * CONTRAST_half));
		///
		/// IF BLEND_TEX4
			fixed4 tex4 = tex2D(_BlendTex4, MAIN_UV * _BlendTex4_ST.xy + _BlendTex4_ST.zw);
			mainTex = lerp(mainTex, blend_height_smooth(mainTex, mainTex.a, tex4, BLEND_SOURCE.a * CONTRAST - CONTRAST_half + tex4.a + _VColorBlendOffset.w, _VColorBlendSmooth.w), saturate(BLEND_SOURCE.a * CONTRAST_half));
		///
	///
///
/// IF TRIPLANAR
	/// IF TRIPLANAR_CEILING
			
			//ceiling
			fixed4 tex_ceiling = tex2D(_TriCeiling, uv_ground * _TriCeiling_ST.xy + _TriCeiling_ST.zw);
	///
			
			//sides
	/// IF TRIPLANAR_SIDES_XY
			fixed4 tex_sideX = tex2D(_TriSideX, uv_sideX * _TriSideX_ST.xy + _TriSideX_ST.zw);
			fixed4 tex_sideZ = tex2D(_TriSideZ, uv_sideZ * _TriSideZ_ST.xy + _TriSideZ_ST.zw);
	/// ELSE
			fixed4 tex_sideX = tex2D(_TriSide, uv_sideX * _TriSide_ST.xy + _TriSide_ST.zw);
			fixed4 tex_sideZ = tex2D(_TriSide, uv_sideZ * _TriSide_ST.xy + _TriSide_ST.zw);
	///
			
			//blending
			half3 blendWeights = pow(abs(IN.worldNormal), _TriplanarBlendStrength.xyz / _TriplanarBlendStrength.w);
			blendWeights = blendWeights / (blendWeights.x + abs(blendWeights.y) + blendWeights.z);
/// IF TRIPLANAR_HEIGHT_SIDES
			
			//height-based blending
			float height = ((tex_sideX.a + tex_sideZ.a)/2) + _TriplanarHeightOffset;
			blendWeights.y = smoothstep(height - _TriplanarHeightSmooth, height + _TriplanarHeightSmooth, blendWeights.y) * blendWeights.y;
			blendWeights = blendWeights / (blendWeights.x + abs(blendWeights.y) + blendWeights.z);
			
/// ELIF TRIPLANAR_HEIGHT_GROUND
			
			//height-based blending
			float height = mainTex.a + _TriplanarHeightOffset;
			blendWeights.y = smoothstep(height - _TriplanarHeightSmooth, height + _TriplanarHeightSmooth, blendWeights.y) * blendWeights.y;
			blendWeights = blendWeights / (blendWeights.x + abs(blendWeights.y) + blendWeights.z);
			
///
	/// IF TRIPLANAR_CEILING
		/// IF TRIPLANAR_CEILING_MINMAX
			mainTex = lerp(tex_ceiling, mainTex, smoothstep(IN.worldPos.y - 0.1, IN.worldPos.y, _CeilMax) - smoothstep(IN.worldPos.y, IN.worldPos.y + 0.1, _CeilMin));
		/// ELSE
			mainTex = lerp(tex_ceiling, mainTex, saturate(sign(IN.worldNormal.y)+1));
		///
			blendWeights.y = abs(blendWeights.y);
	///
			mainTex = tex_sideZ * blendWeights.x + mainTex * blendWeights.y + tex_sideX * blendWeights.z;
///
/// IF HSV_CONTROLS
			
			//Hsv
			float3 mainTexHSV = rgb2hsv(mainTex.rgb);
			mainTexHSV += float3(_HSV_H/360,_HSV_S,_HSV_V);
	/// IF HSV_MASK
			mainTex.rgb = lerp(mainTex.rgb, hsv2rgb(mainTexHSV), @%HSV_MASK%@@%HSV_MASK_CHANNEL%@);
	/// ELSE
			mainTex.rgb = hsv2rgb(mainTexHSV);
	///
///
/// IF DETAIL_TEX
			
			//Detail Tex
	/// IF DETAIL_UV2
			fixed4 detail = tex2D(_Detail, IN.uv2_Detail);
	/// ELSE
			fixed4 detail = tex2D(_Detail, IN.uv_Detail);
	///
	/// IF DETAIL_MASK
			mainTex.rgb = lerp(mainTex.rgb, detail.rgb, @%DETAIL_MASK%@@%DETAIL_MASK_CHANNEL%@);
	/// ELSE
			mainTex.rgb *= (detail.rgb * 2.0);
	///
///
/// IF VCOLORS
			
			//Vertex Colors
			mainTex *= IN.color;
///
/// IF COLORMASK
	/// IF COLORMASK_SEPARATE
			_Color *= lerp(fixed4(1,1,1,1), _MaskedColor, @%COLORMASK%@@%COLORMASK_CHANNEL%@);
	/// ELSE
			_Color = lerp(fixed4(1,1,1,1), _Color, @%COLORMASK%@@%COLORMASK_CHANNEL%@);
	///
///
			
			o.Albedo = mainTex.rgb * _Color.rgb;
/// IF ALPHA_NO_MAINTEX && ALPHA_NO_COLOR
			o.Alpha = 1;
/// ELIF ALPHA_NO_MAINTEX
			o.Alpha = _Color.a;
/// ELIF ALPHA_NO_COLOR
			o.Alpha = mainTex.a;
/// ELSE
			o.Alpha = mainTex.a * _Color.a;
///
/// IF DISSOLVE
			
			//Dissolve
	/// IF DISSOLVE_UV
			fixed4 dslv = tex2D(_DissolveMap, IN.uv_DissolveMap.xy);
	/// ELSE
			fixed4 dslv = tex2D(_DissolveMap, IN.uv@%MAIN_TEX%@.xy);
	///
	/// IF DSLV_R
			#define DSLV dslv.r
	/// ELIF DSLV_G
			#define DSLV dslv.g
			clip(dslv.g - _DissolveValue);
	/// ELIF DSLV_B
			#define DSLV dslv.b
			clip(dslv.b - _DissolveValue);
	/// ELSE
			#define DSLV dslv.a
	///
	/// IF DISSOLVE_GRADIENT
			float dissValue = lerp(-_DissolveGradientWidth, 1, _DissolveValue);
			float dissolveUV = smoothstep(DSLV - _DissolveGradientWidth, DSLV + _DissolveGradientWidth, dissValue);
			half4 dissolveColor = tex2D(_DissolveRamp, dissolveUV.xx);
			dissolveColor *= lerp(0, @%DISSOLVE_GRAD_CONTRAST%@, dissolveUV);
			o.Emission += dissolveColor.rgb;
			
	/// ELSE
			float dissValue = _DissolveValue;
	///
	/// IF CUTOUT
			o.Alpha *= DSLV + _Cutoff - dissValue;
	/// ELSE
			o.Alpha *= DSLV - dissValue;
	///
///
/// IF CUTOUT
			
			//Cutout (Alpha Testing)
			clip (o.Alpha - _Cutoff);
///
/// IF SKETCH || SKETCH_GRADIENT
			
			//Sketch
	/// IF SKETCH_VERTEX
			o.ScreenUVs = IN.sketchUv;
	/// ELSE
			float2 screenUV = IN.sketchUv.xy / IN.sketchUv.w;
			float screenRatio = _ScreenParams.y / _ScreenParams.x;
			screenUV.y *= screenRatio;
		/// IF !NO_SKETCH_OFFSET
			ObjSpaceUVOffset(screenUV, screenRatio);
		///
		/// IF !SKETCH_VERTEX && SKETCH_ANIM
			_Random.x = round(_Time.z * _SketchSpeed) / _SketchSpeed;
			_Random.y = -round(_Time.z * _SketchSpeed) / _SketchSpeed;
			screenUV.xy += frac(_Random.xy);
		///
			o.ScreenUVs = screenUV;
	///
///
/// IF SPECULAR || SPECULAR_ANISOTROPIC
			
			//Specular
	/// IF SPEC_SHIN_MASK
			_Shininess *= @%SPEC_SHIN_MASK%@@%SPEC_SHIN_MASK_CHANNEL%@;
	///
	/// IF SPECULAR_MASK
			o.Gloss = @%SPEC_MASK%@@%SPEC_MASK_CHANNEL%@;
	/// ELSE
			o.Gloss = 1;
	///
			o.Specular = _Shininess;
	/// IF SPECULAR_ANISOTROPIC
			o.Tangent = IN.tangentDir;
	///
///
/// IF BUMP
			
			//Normal map
			half4 normalMap = tex2D(_BumpMap, IN.uv_BumpMap.xy);
	/// IF TEXTURE_BLENDING && TEXBLEND_BUMP
			
			//Texture Blending (Normal maps)
	  /// IF TEXBLEND_LINEAR
		/// IF BLEND_TEX1
			fixed4 bump1 = tex2D(_BumpMap1, MAIN_UV * _BlendTex1_ST.xy + _BlendTex1_ST.zw);
			normalMap = lerp(normalMap, bump1, BLEND_SOURCE.@%BLEND_TEX1_CHNL%@);
		///
		/// IF BLEND_TEX2
			fixed4 bump2 = tex2D(_BumpMap2, MAIN_UV * _BlendTex2_ST.xy + _BlendTex2_ST.zw);
			normalMap = lerp(normalMap, bump2, BLEND_SOURCE.@%BLEND_TEX2_CHNL%@);
		///
		/// IF BLEND_TEX3
			fixed4 bump3 = tex2D(_BumpMap3, MAIN_UV * _BlendTex3_ST.xy + _BlendTex3_ST.zw);
			normalMap = lerp(normalMap, bump3, BLEND_SOURCE.@%BLEND_TEX3_CHNL%@);
		///
		/// IF BLEND_TEX4
			fixed4 bump4 = tex2D(_BumpMap4, MAIN_UV * _BlendTex4_ST.xy + _BlendTex4_ST.zw);
			normalMap = lerp(normalMap, bump4, BLEND_SOURCE.@%BLEND_TEX4_CHNL%@);
		///
	  /// ELIF TEXBLEND_LINEAR_ADD
			normalMap *= blackChannel;
	
		/// IF BLEND_TEX1
			fixed4 bump1 = tex2D(_BumpMap1, MAIN_UV * _BlendTex1_ST.xy + _BlendTex1_ST.zw);
			normalMap += bump1 * BLEND_SOURCE.@%BLEND_TEX1_CHNL%@;
		///
		/// IF BLEND_TEX2
			fixed4 bump2 = tex2D(_BumpMap2, MAIN_UV * _BlendTex2_ST.xy + _BlendTex2_ST.zw);
			normalMap += bump2 * BLEND_SOURCE.@%BLEND_TEX2_CHNL%@;
		///
		/// IF BLEND_TEX3
			fixed4 bump3 = tex2D(_BumpMap3, MAIN_UV * _BlendTex3_ST.xy + _BlendTex3_ST.zw);
			normalMap += bump3 * BLEND_SOURCE.@%BLEND_TEX3_CHNL%@;
		///
		/// IF BLEND_TEX4
			fixed4 bump4 = tex2D(_BumpMap4, MAIN_UV * _BlendTex4_ST.xy + _BlendTex4_ST.zw);
			normalMap += bump4 * BLEND_SOURCE.@%BLEND_TEX4_CHNL%@;
		///
	  /// ELIF TEXBLEND_HEIGHT
			
			#define CONTRAST @%TEXBLEND_HEIGHT_CONTRAST%@
			#define CONTRAST_half CONTRAST/2
			
		/// IF BLEND_TEX1
			fixed4 bump1 = tex2D(_BumpMap1, MAIN_UV * _BlendTex1_ST.xy + _BlendTex1_ST.zw);
			normalMap = lerp(normalMap, blend_height_smooth(normalMap, normalMap.a, bump1, BLEND_SOURCE.r * CONTRAST - CONTRAST_half + bump1.a + _VColorBlendOffset.x, _VColorBlendSmooth.x), saturate(BLEND_SOURCE.r * CONTRAST_half));
		///
		/// IF BLEND_TEX2
			fixed4 bump2 = tex2D(_BumpMap2, MAIN_UV * _BlendTex2_ST.xy + _BlendTex2_ST.zw);
			normalMap = lerp(normalMap, blend_height_smooth(normalMap, normalMap.a, bump2, BLEND_SOURCE.g * CONTRAST - CONTRAST_half + bump2.a + _VColorBlendOffset.y, _VColorBlendSmooth.y), saturate(BLEND_SOURCE.g * CONTRAST_half));
		///
		/// IF BLEND_TEX3
			fixed4 bump3 = tex2D(_BumpMap3, MAIN_UV * _BlendTex3_ST.xy + _BlendTex3_ST.zw);
			normalMap = lerp(normalMap, blend_height_smooth(normalMap, normalMap.a, bump3, BLEND_SOURCE.b * CONTRAST - CONTRAST_half + bump3.a + _VColorBlendOffset.z, _VColorBlendSmooth.z), saturate(BLEND_SOURCE.b * CONTRAST_half));
		///
		/// IF BLEND_TEX4
			fixed4 bump4 = tex2D(_BumpMap4, MAIN_UV * _BlendTex4_ST.xy + _BlendTex4_ST.zw);
			normalMap = lerp(normalMap, blend_height_smooth(normalMap, normalMap.a, bump4, BLEND_SOURCE.a * CONTRAST - CONTRAST_half + bump4.a + _VColorBlendOffset.w, _VColorBlendSmooth.w), saturate(BLEND_SOURCE.a * CONTRAST_half));
		///
	  ///
	///
	/// IF BUMP_SCALE
			o.Normal = UnpackScaleNormal(normalMap, _BumpScale);
	/// ELSE
			o.Normal = UnpackNormal(normalMap);
	///
///
/// IF REFLECTION
			
			//Reflection
	/// IF U5_REFLPROBE
			half3 eyeVec = IN.worldPos.xyz - _WorldSpaceCameraPos.xyz;
		/// IF BUMP
			half3 worldNormal = reflect(eyeVec, WorldNormalVector(IN, o.Normal));
		/// ELSE
			half3 worldNormal = reflect(eyeVec, IN.worldNormal);
		///
			float oneMinusRoughness = _ReflSmoothness;
			fixed3 reflColor = fixed3(0,0,0);
		#if UNITY_SPECCUBE_BOX_PROJECTION
			half3 worldNormal0 = BoxProjectedCubemapDirection (worldNormal, IN.worldPos, unity_SpecCube0_ProbePosition, unity_SpecCube0_BoxMin, unity_SpecCube0_BoxMax);
		#else
			half3 worldNormal0 = worldNormal;
		#endif
			half3 env0 = Unity_GlossyEnvironment (UNITY_PASS_TEXCUBE(unity_SpecCube0), unity_SpecCube0_HDR, worldNormal0, 1-oneMinusRoughness);

		#if UNITY_SPECCUBE_BLENDING
			const float kBlendFactor = 0.99999;
			float blendLerp = unity_SpecCube0_BoxMin.w;
			UNITY_BRANCH
			if (blendLerp < kBlendFactor)
			{
			#if UNITY_SPECCUBE_BOX_PROJECTION
				half3 worldNormal1 = BoxProjectedCubemapDirection (worldNormal, IN.worldPos, unity_SpecCube1_ProbePosition, unity_SpecCube1_BoxMin, unity_SpecCube1_BoxMax);
			#else
				half3 worldNormal1 = worldNormal;
			#endif
				
		/// IF UNITY_5_4
				half3 env1 = Unity_GlossyEnvironment (UNITY_PASS_TEXCUBE_SAMPLER(unity_SpecCube1,unity_SpecCube0), unity_SpecCube1_HDR, worldNormal1, 1-oneMinusRoughness);
		/// ELSE
				half3 env1 = Unity_GlossyEnvironment (UNITY_PASS_TEXCUBE(unity_SpecCube1), unity_SpecCube1_HDR, worldNormal1, 1-oneMinusRoughness);
		///
				reflColor = lerp(env1, env0, blendLerp);
			}
			else
			{
				reflColor = env0;
			}
		#else
			reflColor = env0;
		#endif
			reflColor *= 0.5;
	/// ELSE
		/// IF BUMP
			half3 worldRefl = WorldReflectionVector(IN, o.Normal);
		/// ELSE
			half3 worldRefl = IN.worldRefl;
		///
		/// IF REFL_ROUGH
			fixed4 reflColor = texCUBElod(_Cube, half4(worldRefl.xyz, _ReflectRoughness));
		/// ELSE
			fixed4 reflColor = texCUBE(_Cube, worldRefl);
		///
	///
	/// IF REFL_MASK
			reflColor *= @%REFL_MASK%@@%REFL_MASK_CHANNEL%@;
	///
	/// IF REFL_COLOR
			reflColor.rgb *= _ReflectColor.rgb * _ReflectColor.a;
	///
	/// IF !RIM_REFL
			o.Emission += reflColor.rgb;
	///
///
/// IF SUBSURFACE_SCATTERING
	/// IF SS_MASK
			
			//Subsurface Scattering
			o.SubsurfaceMask = @%SS_MASK%@@%SS_MASK_CHANNEL%@;
	///
///
/// IF (RIM || RIM_OUTLINE) && RIM_VERTEX
			
			//Rim
	/// IF RIM_MASK
			IN.rim *= @%RIM_MASK%@@%RIM_MASK_CHANNEL%@;
	///
	/// IF RIM_OUTLINE
			o.Albedo = lerp(o.Albedo.rgb, _RimColor.rgb, IN.rim);
	/// ELSE
		/// IF REFLECTION && RIM_REFL
			o.Emission += (IN.rim * reflColor.rgb);
		/// ELIF RIM_LIGHTMASK
			o.Rim = IN.rim;
		/// ELSE
			o.Emission += IN.rim;
		///
	///
/// ELIF (RIM || RIM_OUTLINE)
			
			//Rim
	/// IF RIMDIR && BUMP
			float3 viewDir = normalize(IN.bViewDir);
	/// ELIF RIMDIR
			_RimDir.x += UNITY_MATRIX_MV[0][3] * (1/UNITY_MATRIX_MV[2][3]) * (1-UNITY_MATRIX_P[3][3]);
			_RimDir.y += UNITY_MATRIX_MV[1][3] * (1/UNITY_MATRIX_MV[2][3]) * (1-UNITY_MATRIX_P[3][3]);
			float3 viewDir = normalize(UNITY_MATRIX_V[0].xyz * _RimDir.x + UNITY_MATRIX_V[1].xyz * _RimDir.y + UNITY_MATRIX_V[2].xyz * _RimDir.z);
	/// ELSE
			float3 viewDir = normalize(IN.viewDir);
	///
			half rim = 1.0f - saturate( dot(viewDir, o.Normal) );
			rim = smoothstep(_RimMin, _RimMax, rim);
	/// IF RIM_MASK
			rim *= @%RIM_MASK%@@%RIM_MASK_CHANNEL%@;
	///
	/// IF RIM
		/// IF REFLECTION && RIM_REFL
			o.Emission += (_RimColor.rgb * rim * reflColor.rgb) * _RimColor.a;
		/// ELIF RIM_LIGHTMASK
			o.Rim = rim;
		/// ELSE
			o.Emission += (_RimColor.rgb * rim) * _RimColor.a;
		///
	///
	/// IF RIM_OUTLINE
			o.Albedo = lerp(o.Albedo.rgb, _RimColor.rgb, rim * _RimColor.a);
	///
///
/// IF MATCAP
			
			//MatCap
	/// IF MATCAP_PIXEL && BUMP
			half2 capCoord = half2(dot(IN.matcap0, o.Normal), dot(IN.matcap1, o.Normal));
			fixed3 matcap = tex2D(_MatCap, capCoord*0.5+0.5).rgb;
	/// ELSE
			fixed3 matcap = tex2D(_MatCap, IN.matcap).rgb;
	///
			
	/// IF MATCAP_MULT
		/// IF MASK_MC && MC_COLOR
			o.Albedo *= lerp(fixed3(1,1,1), matcap.rgb * _MatCapColor.rgb, @%MASK_MC%@@%MASK_MC_CHANNEL%@ * _MatCapColor.a);
		/// ELIF MC_COLOR
			o.Albedo *= lerp(fixed3(1,1,1), matcap.rgb * _MatCapColor.rgb, _MatCapColor.a);
		/// ELIF MASK_MC
			o.Albedo *= lerp(fixed3(1,1,1), matcap.rgb, @%MASK_MC%@@%MASK_MC_CHANNEL%@);
		/// ELSE
			o.Albedo *= matcap.rgb;
		///
	/// ELIF MATCAP_ADD
		/// IF MASK_MC && MC_COLOR
			o.Emission += matcap.rgb * @%MASK_MC%@@%MASK_MC_CHANNEL%@ * _MatCapColor.rgb * _MatCapColor.a;
		/// ELIF MC_COLOR
			o.Emission += matcap.rgb * _MatCapColor.rgb * _MatCapColor.a;
		/// ELIF MASK_MC
			o.Emission += matcap.rgb * @%MASK_MC%@@%MASK_MC_CHANNEL%@;
		/// ELSE
			o.Emission += matcap.rgb;
		///
	///
///
/// IF EMISSION
			
			//Emission
	/// IF EMISSION_COLOR
			o.Emission += mainTex.rgb * (@%EMISSION_MASK%@@%EMISSION_MASK_CHANNEL%@ * _EmissionColor.a) * _EmissionColor.rgb;
	/// ELSE
			o.Emission += mainTex.rgb * @%EMISSION_MASK%@@%EMISSION_MASK_CHANNEL%@;
	///
/// ELIF EMISSION_COLOR
			
			//Emission
			o.Emission += _EmissionColor.rgb;
///
/// IF CUSTOM_AMBIENT
			
#ifdef FORWARD_BASE
	/// IF CUBE_AMBIENT
			//Ambient Cubemap
			fixed4 cubeAmbient = texCUBE(_AmbientCube, IN.worldNormal);
			half3 customAmbient = o.Albedo * cubeAmbient.rgb * UNITY_LIGHTMODEL_AMBIENT.a;
	/// ELSE
			//Custom Ambient
			half3 customAmbient = IN.ambient;	//either Dir_Ambient or regular Unity SH ambient
	///
	/// IF OCCLUSION
			//Occlusion Map
		/// IF OCCL_RGB
			fixed3 occlusion = tex2D(_OcclusionMap, IN.uv@%MAIN_TEX%@).rgb;
		/// ELSE
			fixed occlusion = tex2D(_OcclusionMap, IN.uv@%MAIN_TEX%@).a;
		///
			customAmbient *= occlusion;
	///
			o.Emission += customAmbient * o.Albedo;
#endif
///
/// IF TEXTURED_THRESHOLD
			
			//Textured Threshold
			o.TexThreshold = tex2D(_ThresholdTex, IN.uv_ThresholdTex).a - 0.5;
///
/// IF USE_VFACE
			
			//VFace Register (backface lighting)
			o.vFace = IN.vFace;
///
		}
/// IF FINAL_COLOR
		
		//================================================================
		// FINAL COLOR MODIFIER
		
	/// IF CUSTOM_LIGHTING
		void fcolor(Input IN, SurfaceOutputCustom o, inout fixed4 color)
	/// ELSE
		void fcolor(Input IN, SurfaceOutput o, inout fixed4 color)
	///
		{
		/// IF RIM && RIM_LIGHTMASK
			color.rgb += (o.NdlColor.rgb * o.Rim * _RimColor.rgb) * _RimColor.a;
		///
		}
///
		
		ENDCG
/// IF (OUTLINE || OUTLINE_BLENDING) && !OUTLINE_BEHIND
		
		CGINCLUDE

		struct a2v
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
		#if TCP2_OUTLINE_TEXTURED
			float3 texcoord : TEXCOORD0;
		#endif
		#if TCP2_COLORS_AS_NORMALS
			float4 color : COLOR;
		#elif TCP2_UV2_AS_NORMALS
			float2 uv2 : TEXCOORD1;
		#endif
			float4 tangent : TANGENT;
		}; 
		
		struct v2f
		{
			float4 pos : SV_POSITION;
		#if TCP2_OUTLINE_TEXTURED
			float3 texlod : TEXCOORD1;
		#endif
		};
		
		float _Outline;
		float _ZSmooth;
		fixed4 _OutlineColor;
		
	#if TCP2_OUTLINE_TEXTURED
		sampler2D _MainTex;
		float4 _MainTex_ST;
		float _TexLod;
	#endif

		v2f TCP2_Outline_Vert(a2v v)
		{
			v2f o;
			
			//Curved World
			V_CW_TransformPointAndNormal(v.vertex, v.normal, v.tangent);
			
		//Correct Z artefacts
		#if TCP2_ZSMOOTH_ON
			float4 pos = float4(UnityObjectToViewPos(v.vertex), 1.0);
			
			#ifdef TCP2_COLORS_AS_NORMALS
				//Vertex Color for Normals
				float3 normal = mul( (float3x3)UNITY_MATRIX_IT_MV, (v.color.xyz*2) - 1 );
			#elif TCP2_TANGENT_AS_NORMALS
				//Tangent for Normals
				float3 normal = mul( (float3x3)UNITY_MATRIX_IT_MV, v.tangent.xyz);
			#elif TCP2_UV2_AS_NORMALS
				//UV2 for Normals
				float3 normal;
				//unpack uv2
				v.uv2.x = v.uv2.x * 255.0/16.0;
				normal.x = floor(v.uv2.x) / 15.0;
				normal.y = frac(v.uv2.x) * 16.0 / 15.0;
				//get z
				normal.z = v.uv2.y;
				//transform
				normal = mul( (float3x3)UNITY_MATRIX_IT_MV, normal*2-1);
			#else
				float3 normal = mul( (float3x3)UNITY_MATRIX_IT_MV, v.normal);
			#endif
			
			normal.z = -_ZSmooth;
			
			#ifdef TCP2_OUTLINE_CONST_SIZE
				//Camera-independent outline size
				float dist = distance(_WorldSpaceCameraPos, mul(unity_ObjectToWorld, v.vertex));
				pos = pos + float4(normalize(normal),0) * _Outline * 0.01 * dist;
			#else
				pos = pos + float4(normalize(normal),0) * _Outline * 0.01;
			#endif
			
		#else

			#ifdef TCP2_COLORS_AS_NORMALS
				//Vertex Color for Normals
				float3 normal = (v.color.xyz*2) - 1;
			#elif TCP2_TANGENT_AS_NORMALS
				//Tangent for Normals
				float3 normal = v.tangent.xyz;
			#elif TCP2_UV2_AS_NORMALS
				//UV2 for Normals
				float3 n;
				//unpack uv2
				v.uv2.x = v.uv2.x * 255.0/16.0;
				n.x = floor(v.uv2.x) / 15.0;
				n.y = frac(v.uv2.x) * 16.0 / 15.0;
				//get z
				n.z = v.uv2.y;
				//transform
				n = n*2 - 1;
				float3 normal = n;
			#else
				float3 normal = v.normal;
			#endif
			
			//Camera-independent outline size
			#ifdef TCP2_OUTLINE_CONST_SIZE
				float dist = distance(_WorldSpaceCameraPos, mul(unity_ObjectToWorld, v.vertex));
				float4 pos = float4(UnityObjectToViewPos(v.vertex + float4(normal,0) * _Outline * 0.01 * dist), 1.0);
			#else
				float4 pos = float4(UnityObjectToViewPos(v.vertex + float4(normal,0) * _Outline * 0.01), 1.0);
			#endif
		#endif
			
			o.pos = mul(UNITY_MATRIX_P, pos);
			
		#if TCP2_OUTLINE_TEXTURED
			half2 uv = TRANSFORM_TEX(v.texcoord, _MainTex);
			o.texlod = tex2Dlod(_MainTex, float4(uv, 0, _TexLod)).rgb;
		#endif
			
			return o;
		}

		float4 TCP2_Outline_Frag (v2f IN) : COLOR
		{
		#if TCP2_OUTLINE_TEXTURED
			return float4(IN.texlod, 1) * _OutlineColor;
		#else
			return _OutlineColor;
		#endif
		}

		ENDCG
		
		//Outlines
	/// IF OUTLINE
		/// IF FORCE_SM2

		Pass
		{
			Name "OUTLINE"

			Cull Front
			Offset [_Offset1],[_Offset2]
			Tags { "LightMode"="ForwardBase" }

			CGPROGRAM

			#include "UnityCG.cginc"

			#pragma vertex TCP2_Outline_Vert
			#pragma fragment TCP2_Outline_Frag

			#pragma multi_compile TCP2_NONE TCP2_ZSMOOTH_ON
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_CONST_SIZE
			#pragma multi_compile TCP2_NONE TCP2_COLORS_AS_NORMALS TCP2_TANGENT_AS_NORMALS TCP2_UV2_AS_NORMALS

		ENDCG
		}
		
		/// ELSE

		Pass
		{
			Name "OUTLINE"

			Cull Front
			Offset [_Offset1],[_Offset2]
			Tags { "LightMode"="ForwardBase" }

			CGPROGRAM

			#pragma vertex TCP2_Outline_Vert
			#pragma fragment TCP2_Outline_Frag

			#pragma multi_compile TCP2_NONE TCP2_ZSMOOTH_ON
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_CONST_SIZE
			#pragma multi_compile TCP2_NONE TCP2_COLORS_AS_NORMALS TCP2_TANGENT_AS_NORMALS TCP2_UV2_AS_NORMALS
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_TEXTURED

			#pragma target 3.0

			ENDCG
		}

		///
	///
	/// IF OUTLINE_BLENDING
		Tags { "Queue"="Transparent" "RenderType"="Transparent" "IgnoreProjectors"="True" }
		/// IF FORCE_SM2

		Pass
		{
			Name "OUTLINE_BLENDING"
			
			Cull Front
			Offset [_Offset1],[_Offset2]
			Tags { "LightMode"="ForwardBase" "Queue"="Transparent" "IgnoreProjectors"="True" "RenderType"="Transparent" }
			Blend [_SrcBlendOutline] [_DstBlendOutline]

			CGPROGRAM

			#include "UnityCG.cginc"

			#pragma vertex TCP2_Outline_Vert
			#pragma fragment TCP2_Outline_Frag

			#pragma multi_compile TCP2_NONE TCP2_ZSMOOTH_ON
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_CONST_SIZE
			#pragma multi_compile TCP2_NONE TCP2_COLORS_AS_NORMALS TCP2_TANGENT_AS_NORMALS TCP2_UV2_AS_NORMALS
			
		ENDCG
		}

		/// ELSE

		Pass
		{
			Name "OUTLINE_BLENDING"

			Cull Front
			Offset [_Offset1],[_Offset2]
			Tags { "LightMode"="ForwardBase" "Queue"="Transparent" "IgnoreProjectors"="True" "RenderType"="Transparent" }
			Blend [_SrcBlendOutline] [_DstBlendOutline]

			CGPROGRAM

			#pragma vertex TCP2_Outline_Vert
			#pragma fragment TCP2_Outline_Frag

			#pragma multi_compile TCP2_NONE TCP2_ZSMOOTH_ON
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_CONST_SIZE
			#pragma multi_compile TCP2_NONE TCP2_COLORS_AS_NORMALS TCP2_TANGENT_AS_NORMALS TCP2_UV2_AS_NORMALS
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_TEXTURED

			#pragma target 3.0

			ENDCG
		}

		///
	///
///
/// IF (OUTLINE || OUTLINE_BLENDING) && OUTLINE_BEHIND && OUTLINE_DEPTH
		
		//Outline - Depth Pass Only
		Pass
		{
			Name "OUTLINE_DEPTH"
			
			Cull Off
			Offset [_Offset1],[_Offset2]
			Tags { "LightMode"="ForwardBase" }
			
			//Write to Depth Buffer only
			ColorMask 0
			ZWrite On
			
			CGPROGRAM
			
			#include "UnityCG.cginc"
			//#include "TCP2_Outline_Include.cginc"		//Already included for Curved World modifications
			
			#pragma vertex TCP2_Outline_Vert
			#pragma fragment TCP2_Outline_Frag
			
			#pragma multi_compile TCP2_NONE TCP2_ZSMOOTH_ON
			#pragma multi_compile TCP2_NONE TCP2_OUTLINE_CONST_SIZE
			#pragma multi_compile TCP2_NONE TCP2_COLORS_AS_NORMALS TCP2_TANGENT_AS_NORMALS TCP2_UV2_AS_NORMALS
			//#pragma multi_compile TCP2_NONE TCP2_OUTLINE_TEXTURED		//Not needed for depth
			
			#pragma target @%SHADER_TARGET%@
			
			ENDCG
		}
///
/// IF ALPHA && DITHERED_SHADOWS
		
		//Dithered Shadows
		Pass
		{
			Name "ShadowCaster"
			Tags{ "LightMode" = "ShadowCaster" }

			CGPROGRAM

			#include "UnityCG.cginc"
			#pragma vertex vertShadowCaster
			#pragma fragment fragShadowCaster
			#pragma multi_compile_shadowcaster

			half4		_Color;
			half		_Cutoff;
			sampler2D	@%MAIN_TEX%@;
			float4		@%MAIN_TEX%@_ST;
			sampler3D	_DitherMaskLOD;

			struct VertexInput
			{
				float4 vertex	: POSITION;
				float3 normal	: NORMAL;
				float2 uv0		: TEXCOORD0;
			};

			struct VertexOutputShadowCaster
			{
				V2F_SHADOW_CASTER_NOPOS
				float2 tex : TEXCOORD1;
			};

			void vertShadowCaster(VertexInput v, out VertexOutputShadowCaster o, out float4 opos : SV_POSITION)
			{
				TRANSFER_SHADOW_CASTER_NOPOS(o,opos)
				o.tex = TRANSFORM_TEX(v.uv0, @%MAIN_TEX%@);
			}

			half4 fragShadowCaster(VertexOutputShadowCaster i, UNITY_VPOS_TYPE vpos : VPOS) : SV_Target
			{
	/// IF ALPHA_NO_MAINTEX && ALPHA_NO_COLOR
				half alpha = 1;
	/// ELIF ALPHA_NO_MAINTEX
				half alpha = _Color.a;
	/// ELIF ALPHA_NO_COLOR
				half alpha = tex2D(@%MAIN_TEX%@, i.tex).a;
	/// ELSE
				half alpha = tex2D(@%MAIN_TEX%@, i.tex).a * _Color.a;
	///
				// Use dither mask for alpha blended shadows, based on pixel position xy
				// and alpha level. Our dither texture is 4x4x16.
				half alphaRef = tex3D(_DitherMaskLOD, float3(vpos.xy*0.25,alpha*0.9375)).a;
				clip (alphaRef - 0.01);

				SHADOW_CASTER_FRAGMENT(i)
			}

			ENDCG
		}
///
	}
	
	Fallback "Diffuse"
	CustomEditor "TCP2_MaterialInspector_SG"
}